team <- c()
game <- c()
player <- c()
team_pitcher <- c()
team_hitter <- c()
pitcher <- c()
hitter <- c()
player_register <- c()
for (year in (2016:2020)) {
path <- paste0(path_head, year, path_tail)
team_temp <- read_excel(path=path, sheet=1)
team_temp <- cbind(team, year=year)
game_temp <- read_excel(path=path, sheet=2)
player_temp <- read_excel(path=path, sheet=3)
team_pitcher_temp <- read_excel(path=path, sheet=4)
team_hitter_temp <- read_excel(path=path, sheet=5)
pitcher_temp <- read_excel(path=path, sheet=6)
hitter_temp <- read_excel(path=path, sheet=7)
player_register_temp <- read_excel(path=path, sheet=8)
team <- rbind(team, team_temp)
game <- rbind(game, game_temp)
player <- rbind(player, player_temp)
team_pitcher <- rbind(team_pitcher, team_pitcher_temp)
team_hitter <- rbind(team_hitter, team_hitter_temp)
pitcher <- rbind(pitcher, pitcher_temp)
hitter <- rbind(hitter, hitter_temp)
player_register <- rbind(player_register, player_register_temp)
}
team_temp <- read_excel(path=path, sheet=1)
team_temp <- cbind(team, year=year)
View(team_temp)
team_temp <- read_excel(path=path, sheet=1)
team_temp <- cbind(team_temp, year=year)
library(readxl)
#### 시즌별 엑셀 데이터 가져오기
#[참고] path 샘플은 이것: "../차철성/2020빅콘테스트 데이터분석분야-퓨쳐스리그_스포츠투아이_제공데이터(.xlsx)_시즌별 구분/2020빅콘테스트_스포츠투아이_제공데이터_2016.xlsx"
path_head <- "../차철성/2020빅콘테스트 데이터분석분야-퓨쳐스리그_스포츠투아이_제공데이터(.xlsx)_시즌별 구분/2020빅콘테스트_스포츠투아이_제공데이터_"
path_tail <- ".xlsx"
team <- c()
game <- c()
player <- c()
team_pitcher <- c()
team_hitter <- c()
pitcher <- c()
hitter <- c()
player_register <- c()
for (year in (2016:2020)) {
path <- paste0(path_head, year, path_tail)
team_temp <- read_excel(path=path, sheet=1)
team_temp <- cbind(team_temp, year=year)
game_temp <- read_excel(path=path, sheet=2)
player_temp <- read_excel(path=path, sheet=3)
team_pitcher_temp <- read_excel(path=path, sheet=4)
team_hitter_temp <- read_excel(path=path, sheet=5)
pitcher_temp <- read_excel(path=path, sheet=6)
hitter_temp <- read_excel(path=path, sheet=7)
player_register_temp <- read_excel(path=path, sheet=8)
team <- rbind(team, team_temp)
game <- rbind(game, game_temp)
player <- rbind(player, player_temp)
team_pitcher <- rbind(team_pitcher, team_pitcher_temp)
team_hitter <- rbind(team_hitter, team_hitter_temp)
pitcher <- rbind(pitcher, pitcher_temp)
hitter <- rbind(hitter, hitter_temp)
player_register <- rbind(player_register, player_register_temp)
}
View(test)
rm(test)
View(team)
View(team)
View(game)
View(game)
save(game)
save(game, game)
save(list(game, hitter), file=test)
save(game, file=test)
save(list(game, hitter), file=test.RData)
save(game, file=test.RData)
getwd()
rm(*temp)
save(game, file="test.RData")
kbo <-  list(team, game, player, team_pitcher, team_hitter, pitcher, hitter, player_register)
# load 함수로 불러서 쓸 수 있음 load(file="파일경로/kbo.RData")
kbo$team
# load 함수로 불러서 쓸 수 있음 load(file="파일경로/kbo.RData")
kbo[[team]]
# load 함수로 불러서 쓸 수 있음 load(file="파일경로/kbo.RData")
kbo[team]
# 데이터를 하나의 리스트로 묶어서 저장
kbo <-  list(team, game, player, team_pitcher, team_hitter, pitcher, hitter, player_register)
kbo
kbo$team
kbo$player
team
kbo$player
kbo[[1]]
kbo[1]
unlist(kbo$team)
save(kbo, file="kbo.RData")
kbo$team
kbo[team]
kbo$hitter
kbo[1]
# 데이터를 하나의 리스트로 묶어서 저장
kbo <-  list(team=team, game=game,
player=player,
team_pitcher=team_pitcher,
team_hitter=team_hitter,
pitcher=pitcher,
hitter=hitter,
player_register=player_register)
# 공유할 수 있도록 리스트객체를 RData파일로 저장
save(kbo, file="kbo.RData")
kbo$team
library(dplyr)
View(hitter)
# 데티어 타입 변환
game$GDAY_DS <- date(game$GDAY_DS)
?todate
??todate
Date(game$GDAY_DS)
as.Date(game$GDAY_DS)
?as.Date.numeric
as.character(game$GDAY_DS)
as.Date(as.character(game$GDAY_DS))
as.Date(as.character(game$GDAY_DS, "%Y%m%d"))
as.Date("20170201", "yyyymmdd")
as.Date("20170201", "%Y%m%d")
as.Date(as.character(game$GDAY_DS), "%Y%m%d")
# 데이터 타입 변환
game$GDAY_DS <- as.Date(as.character(game$GDAY_DS), "%Y%m%d")
hitter$GDAY_DS <- as.Date(as.character(hitter$GDAY_DS), "%Y%m%d")
View(hitter)
pitcher$GDAY_DS <- as.Date(as.character(pitcher$GDAY_DS), "%Y%m%d")
player_register$GDAY_DS <- as.Date(as.character(player_register$GDAY_DS), "%Y%m%d")
game$GDAY_DS <- as.Date(as.character(game$GDAY_DS), "%Y%m%d")
hitter$GDAY_DS <- as.Date(as.character(hitter$GDAY_DS), "%Y%m%d")
pitcher$GDAY_DS <- as.Date(as.character(pitcher$GDAY_DS), "%Y%m%d")
player_register$GDAY_DS <- as.Date(as.character(player_register$GDAY_DS), "%Y%m%d")
team_hitter$GDAY_DS <- as.Date(as.character(team_hitter$GDAY_DS), "%Y%m%d")
team_pitcher <- as.Date(as.character(team_pitcher$GDAY_DS), "%Y%m%d")
path_head <- "../차철성/2020빅콘테스트 데이터분석분야-퓨쳐스리그_스포츠투아이_제공데이터(.xlsx)_시즌별 구분/2020빅콘테스트_스포츠투아이_제공데이터_"
path_tail <- ".xlsx"
team <- c()
game <- c()
player <- c()
team_pitcher <- c()
team_hitter <- c()
pitcher <- c()
hitter <- c()
player_register <- c()
for (year in (2016:2020)) {
path <- paste0(path_head, year, path_tail)
team_temp <- read_excel(path=path, sheet=1)
team_temp <- cbind(team_temp, year=year)
game_temp <- read_excel(path=path, sheet=2)
player_temp <- read_excel(path=path, sheet=3)
team_pitcher_temp <- read_excel(path=path, sheet=4)
team_hitter_temp <- read_excel(path=path, sheet=5)
pitcher_temp <- read_excel(path=path, sheet=6)
hitter_temp <- read_excel(path=path, sheet=7)
player_register_temp <- read_excel(path=path, sheet=8)
team <- rbind(team, team_temp)
game <- rbind(game, game_temp)
player <- rbind(player, player_temp)
team_pitcher <- rbind(team_pitcher, team_pitcher_temp)
team_hitter <- rbind(team_hitter, team_hitter_temp)
pitcher <- rbind(pitcher, pitcher_temp)
hitter <- rbind(hitter, hitter_temp)
player_register <- rbind(player_register, player_register_temp)
}
# 데이터 타입 변환
game$GDAY_DS <- as.Date(as.character(game$GDAY_DS), "%Y%m%d")
hitter$GDAY_DS <- as.Date(as.character(hitter$GDAY_DS), "%Y%m%d")
pitcher$GDAY_DS <- as.Date(as.character(pitcher$GDAY_DS), "%Y%m%d")
player_register$GDAY_DS <- as.Date(as.character(player_register$GDAY_DS), "%Y%m%d")
team_hitter$GDAY_DS <- as.Date(as.character(team_hitter$GDAY_DS), "%Y%m%d")
team_pitcher <- as.Date(as.character(team_pitcher$GDAY_DS), "%Y%m%d")
# 데이터를 하나의 리스트로 묶어서 저장
kbo <-  list(team=team, game=game,
player=player,
team_pitcher=team_pitcher,
team_hitter=team_hitter,
pitcher=pitcher,
hitter=hitter,
player_register=player_register)
# 공유할 수 있도록 리스트객체를 RData파일로 저장
save(kbo, file="kbo.RData")
rm(list())
list()
rm(ls())
ls()
rm(game)
rm(listd=ls())
rm(list=ls())
library(readxl)
library(dplyr)
#### 시즌별 엑셀 데이터 가져오기
#[참고] path 샘플은 이것: "../차철성/2020빅콘테스트 데이터분석분야-퓨쳐스리그_스포츠투아이_제공데이터(.xlsx)_시즌별 구분/2020빅콘테스트_스포츠투아이_제공데이터_2016.xlsx"
path_head <- "../차철성/2020빅콘테스트 데이터분석분야-퓨쳐스리그_스포츠투아이_제공데이터(.xlsx)_시즌별 구분/2020빅콘테스트_스포츠투아이_제공데이터_"
path_tail <- ".xlsx"
team <- c()
game <- c()
player <- c()
team_pitcher <- c()
team_hitter <- c()
pitcher <- c()
hitter <- c()
player_register <- c()
for (year in (2016:2020)) {
path <- paste0(path_head, year, path_tail)
team_temp <- read_excel(path=path, sheet=1)
team_temp <- cbind(team_temp, year=year)
game_temp <- read_excel(path=path, sheet=2)
player_temp <- read_excel(path=path, sheet=3)
team_pitcher_temp <- read_excel(path=path, sheet=4)
team_hitter_temp <- read_excel(path=path, sheet=5)
pitcher_temp <- read_excel(path=path, sheet=6)
hitter_temp <- read_excel(path=path, sheet=7)
player_register_temp <- read_excel(path=path, sheet=8)
team <- rbind(team, team_temp)
game <- rbind(game, game_temp)
player <- rbind(player, player_temp)
team_pitcher <- rbind(team_pitcher, team_pitcher_temp)
team_hitter <- rbind(team_hitter, team_hitter_temp)
pitcher <- rbind(pitcher, pitcher_temp)
hitter <- rbind(hitter, hitter_temp)
player_register <- rbind(player_register, player_register_temp)
}
# 데이터 타입 변환
game$GDAY_DS <- as.Date(as.character(game$GDAY_DS), "%Y%m%d")
hitter$GDAY_DS <- as.Date(as.character(hitter$GDAY_DS), "%Y%m%d")
pitcher$GDAY_DS <- as.Date(as.character(pitcher$GDAY_DS), "%Y%m%d")
player_register$GDAY_DS <- as.Date(as.character(player_register$GDAY_DS), "%Y%m%d")
team_hitter$GDAY_DS <- as.Date(as.character(team_hitter$GDAY_DS), "%Y%m%d")
team_pitcher <- as.Date(as.character(team_pitcher$GDAY_DS), "%Y%m%d")
# 데이터를 하나의 리스트로 묶어서 저장
kbo <-  list(team=team, game=game,
player=player,
team_pitcher=team_pitcher,
team_hitter=team_hitter,
pitcher=pitcher,
hitter=hitter,
player_register=player_register)
# 공유할 수 있도록 리스트객체를 RData파일로 저장
save(kbo, file="kbo.RData")
# [참고!!]
# load 함수로 불러서 쓸 수 있음 :예시) load(file="파일경로/kbo.RData")
# 원하는 데이터 추출 가능함 :예시) kbo$team
#########################
# 선수별 타율 구하기
# (a) 특정 기간
# (b) 특정팀
# (c) 특정 선수
# (d) 특정 조건 (출전 경기수, 삼진 10개 이하 등등..)
rm(list=$(temp))
rm(list=grep(ls(),"$(temp)"))
grep(ls(), "game")
grep(ls(), "hitter")
ls()
grep(ls(), "hitter", value=TRUE)
grep(ls(), "game", value=TRUE)
grep(ls(), "game_temp", value=TRUE)
grep(ls(), "hitter_temp", value=TRUE)
kbo$hitter %>% filter(GDAY_DS >= start_date, GDAY_DS <= end_date)
#########################
# 선수별 타율 구하기
# (a) 특정 기간
start_date <- as.Date("2016-01-01", "%Y-%m-%d")
end_date <- as.Date("2016-06-30", "%Y-%m-%d")
kbo$hitter %>% filter(GDAY_DS >= start_date, GDAY_DS <= end_date)
t_id
kbo$hitter %>%
filter(GDAY_DS >= start_date, GDAY_DS <= end_date) %>%
filter(T_ID = t_id)
kbo$hitter %>%
filter(GDAY_DS >= start_date, GDAY_DS <= end_date) %>%
filter(T_ID == t_id)
# (b) 특정팀
t_id <- "HH"
kbo$hitter %>%
filter(GDAY_DS >= start_date, GDAY_DS <= end_date) %>%
filter(T_ID == t_id)
length(player$NaME)
distinct(player$NAME)
disticnt(player, NAME)
distinct(player, NAME)
distinct(player, PCODE)
length(distinct(player, PCODE))
count(distinct(player, PCODE))
kbo$hitter %>%
filter(GDAY_DS >= start_date, GDAY_DS <= end_date) %>%
filter(T_ID == t_id) %>%
filter(P_ID %in% p_id)
start_date <- as.Date("2016-01-01", "%Y-%m-%d")
end_date <- as.Date("2016-06-30", "%Y-%m-%d")
# (b) 특정팀
t_id <- "LG"
# (c) 특정 선수
p_id <- c(60100, 60105)
# (d) 특정 조건 (출전 경기수, 삼진 10개 이하 등등..)
kbo$hitter %>%
filter(GDAY_DS >= start_date, GDAY_DS <= end_date) %>%
filter(T_ID == t_id) %>%
filter(P_ID %in% p_id)
kbo$hitter %>%
filter(GDAY_DS >= start_date, GDAY_DS <= end_date) %>%
filter(T_ID == t_id) %>%
filter(P_ID %in% p_id) %>%
select(T_ID, P_ID, AB, HIT)
start_date <- as.Date("2016-01-01", "%Y-%m-%d")
end_date <- as.Date("2016-06-30", "%Y-%m-%d")
# (b) 특정팀
t_id <- "LG"
# (c) 특정 선수
p_id <- c(60100, 60164)
# (a), (b), (c)를 만족하는 선수의 타율
kbo$hitter %>%
filter(GDAY_DS >= start_date, GDAY_DS <= end_date) %>%
filter(T_ID == t_id) %>%
filter(P_ID %in% p_id) %>%
select(T_ID, P_ID, AB, HIT)
start_date <- as.Date("2016-01-01", "%Y-%m-%d")
end_date <- as.Date("2016-06-30", "%Y-%m-%d")
# (b) 특정팀
t_id <- "HH"
# (c) 특정 선수
p_id <- c(60404, 62700)
# (a), (b), (c)를 만족하는 선수의 타율
kbo$hitter %>%
filter(GDAY_DS >= start_date, GDAY_DS <= end_date) %>%
filter(T_ID == t_id) %>%
filter(P_ID %in% p_id) %>%
select(T_ID, P_ID, AB, HIT)
kbo$hitter %>%
filter(GDAY_DS >= start_date, GDAY_DS <= end_date) %>%
filter(T_ID == t_id) %>%
filter(P_ID %in% p_id) %>%
select(T_ID, P_ID, AB, HIT) %>%
summarise(P_ID)
kbo$hitter %>%
filter(GDAY_DS >= start_date, GDAY_DS <= end_date) %>%
filter(T_ID == t_id) %>%
filter(P_ID %in% p_id) %>%
select(T_ID, P_ID, AB, HIT) %>%
group_by(P_ID) %>%
summarise(P_ID)
kbo$hitter %>%
filter(GDAY_DS >= start_date, GDAY_DS <= end_date) %>%
filter(T_ID == t_id) %>%
filter(P_ID %in% p_id) %>%
select(T_ID, P_ID, AB, HIT) %>%
group_by(P_ID)
kbo$hitter %>%
filter(GDAY_DS >= start_date, GDAY_DS <= end_date) %>%
filter(T_ID == t_id) %>%
filter(P_ID %in% p_id) %>%
select(P_ID, AB, HIT) %>%
group_by(P_ID)
kbo$hitter %>%
filter(GDAY_DS >= start_date, GDAY_DS <= end_date) %>%
filter(T_ID == t_id) %>%
filter(P_ID %in% p_id) %>%
select(P_ID, AB, HIT) %>%
group_by(P_ID) %>%
summarise(sum_AB=sum(AB), sum_HIT=sum(HIT))
kbo$hitter %>%
filter(GDAY_DS >= start_date, GDAY_DS <= end_date) %>%
filter(T_ID == t_id) %>%
filter(P_ID %in% p_id) %>%
select(P_ID, AB, HIT) %>%
group_by(P_ID) %>%
summarise(sum_AB=sum(AB), sum_HIT=sum(HIT)) %>%
mutate(AVG=sum_HIT/sum_AB)
print(result)
# (a), (b), (c)를 만족하는 선수의 타율
result <- kbo$hitter %>%
filter(GDAY_DS >= start_date, GDAY_DS <= end_date) %>%
filter(T_ID == t_id) %>%
filter(P_ID %in% p_id) %>%
select(P_ID, AB, HIT) %>%
group_by(P_ID) %>%
summarise(sum_AB=sum(AB), sum_HIT=sum(HIT)) %>%
mutate(AVG=sum_HIT/sum_AB)
print(result)
distinct(pitcher$WLS)
library(dplyr)
distict(pitcher, WLS)
distinct(pitcher, WLS)
pitcher %>% group_by(WLS) %>% summarise(n)
pitcher %>% group_by(WLS) %>% summarise(n(WLS))
pitcher %>% group_by(WLS) %>% summarise(count=n(WLS))
pitcher %>% group_by(WLS) %>% tally()
pitcher %>% group_by(WLS) %>% summarise(count(WLS))
rlang::last_error()
kbo$hitter %>%
filter(GDAY_DS >= start_date, GDAY_DS <= end_date) %>%
select(T_ID, P_ID, KK) %>%
group_by(P_ID) %>%
summarise(sum_game=n())
kbo$hitter %>%
filter(GDAY_DS >= start_date, GDAY_DS <= end_date) %>%
select(T_ID, P_ID, KK) %>%
group_by(P_ID) %>%
summarise(sum_game=n(), sum_KK=sum(KK))
kbo$hitter %>%
filter(GDAY_DS >= start_date, GDAY_DS <= end_date) %>%
select(T_ID, P_ID, KK) %>%
group_by(P_ID) %>%
summarise(sum_game=n(), sum_KK=sum(KK), sum_AB=sum(AB), sum_HIT=sum(HIT))
kbo$hitter %>%
filter(GDAY_DS >= start_date, GDAY_DS <= end_date) %>%
select(T_ID, P_ID, KK, AB, HIT) %>%
group_by(P_ID) %>%
summarise(sum_game=n(), sum_KK=sum(KK), sum_AB=sum(AB), sum_HIT=sum(HIT))
kbo$hitter %>%
filter(GDAY_DS >= start_date, GDAY_DS <= end_date) %>%
select(T_ID, P_ID, KK, AB, HIT) %>%
group_by(P_ID) %>%
summarise(sum_game=n(), sum_KK=sum(KK), sum_AB=sum(AB), sum_HIT=sum(HIT)) %>%
mutate(AVG=sum_HIT/sum_AB)
kbo$hitter %>%
filter(GDAY_DS >= start_date, GDAY_DS <= end_date) %>%
select(T_ID, P_ID, KK, AB, HIT) %>%
group_by(P_ID) %>%
summarise(sum_game=n(P_ID), sum_KK=sum(KK), sum_AB=sum(AB), sum_HIT=sum(HIT)) %>%
mutate(AVG=sum_HIT/sum_AB)
kbo$hitter %>%
filter(GDAY_DS >= start_date, GDAY_DS <= end_date) %>%
select(T_ID, P_ID, KK, AB, HIT) %>%
group_by(P_ID) %>%
summarise(sum_game=count(P_ID), sum_KK=sum(KK), sum_AB=sum(AB), sum_HIT=sum(HIT)) %>%
mutate(AVG=sum_HIT/sum_AB)
kbo$hitter %>%
filter(GDAY_DS >= start_date, GDAY_DS <= end_date) %>%
select(T_ID, P_ID, KK, AB, HIT) %>%
group_by(P_ID) %>%
summarise(num_games=n())
start_date
end_date
kbo$hitter %>%
filter(GDAY_DS >= start_date, GDAY_DS <= end_date) %>%
select(T_ID, P_ID, KK, AB, HIT)
kbo$hitter %>%
filter(GDAY_DS >= start_date, GDAY_DS <= end_date) %>%
select(T_ID, P_ID, KK, AB, HIT) %>%
group_by(P_ID) %>%
summarise(sum_KK=sum(KK), sum_AB=sum(AB), sum_HIT=sum(HIT))
kbo$hitter %>%
filter(GDAY_DS >= start_date, GDAY_DS <= end_date) %>%
select(T_ID, P_ID, KK, AB, HIT) %>%
group_by(P_ID) %>%
summarise(sum_game=n(),sum_KK=sum(KK), sum_AB=sum(AB), sum_HIT=sum(HIT)) %>%
mutate(AVG=sum_HIT/sum_AB)
# (d) 특정 조건 (출전 경기수, 삼진 10개 이하 등등..)
# 기간 중 30경기 이상 투수로 출전
LOWER_BOUND_GAMES <- 30
kbo$hitter %>%
filter(GDAY_DS >= start_date, GDAY_DS <= end_date) %>%
select(T_ID, P_ID, KK, AB, HIT) %>%
group_by(P_ID) %>%
summarise(sum_game=n(),sum_KK=sum(KK), sum_AB=sum(AB), sum_HIT=sum(HIT)) %>%
mutate(AVG=sum_HIT/sum_AB) %>%
filter(sum_game >= LOWER_BOUND_GAMES)
kbo$hitter %>%
filter(GDAY_DS >= start_date, GDAY_DS <= end_date) %>%
select(T_ID, P_ID, KK, AB, HIT) %>%
group_by(P_ID) %>%
summarise(sum_game=n(), sum_KK=sum(KK), sum_AB=sum(AB), sum_HIT=sum(HIT), ) %>%
mutate(AVG=sum_HIT/sum_AB) %>%
filter(sum_game >= LOWER_BOUND_GAMES, sum_KK <= UPPER_BOUND_KK )
# 기간 중 삼진 10개 이하
UPPER_BOUND_KK <- 10
kbo$hitter %>%
filter(GDAY_DS >= start_date, GDAY_DS <= end_date) %>%
select(T_ID, P_ID, KK, AB, HIT) %>%
group_by(P_ID) %>%
summarise(sum_game=n(), sum_KK=sum(KK), sum_AB=sum(AB), sum_HIT=sum(HIT), ) %>%
mutate(AVG=sum_HIT/sum_AB) %>%
filter(sum_game >= LOWER_BOUND_GAMES, sum_KK <= UPPER_BOUND_KK )
kbo$hitter %>%
filter(GDAY_DS >= start_date, GDAY_DS <= end_date) %>%
select(T_ID, P_ID, KK, AB, HIT) %>%
group_by(T_ID, P_ID) %>%
summarise(sum_game=n(), sum_KK=sum(KK), sum_AB=sum(AB), sum_HIT=sum(HIT)) %>%
mutate(AVG=sum_HIT/sum_AB) %>%
filter(sum_game >= LOWER_BOUND_GAMES, sum_KK <= UPPER_BOUND_KK )
result2 <- kbo$hitter %>%
filter(GDAY_DS >= start_date, GDAY_DS <= end_date) %>%
select(T_ID, P_ID, KK, AB, HIT) %>%
group_by(T_ID, P_ID) %>%
summarise(sum_game=n(), sum_KK=sum(KK), sum_AB=sum(AB), sum_HIT=sum(HIT)) %>%
mutate(AVG=sum_HIT/sum_AB) %>%
filter(sum_game >= LOWER_BOUND_GAMES, sum_KK <= UPPER_BOUND_KK )
result2
left_join(result2, kbo$player, by=c("P_ID", "PCODE"))
kbo$player
left_join(result2, kbo$player, by=c("P_ID" = "PCODE"))
kbo$player[78756]
kbo$player[==78756]
kbo$player[PCODE==78756]
kbo$player[player$PCODE==78756]
player[PCODE==78756]
player[player$PCODE==78756]
player[player$PCODE==78756,]
kbo$player[kbo$player$PCODE==78756]
kbo$player[kbo$player$PCODE==78756,]
result2
kbo$player %>% select(PCODE, NAME) %>% distinct()
player_names <- kbo$player %>% select(PCODE, NAME) %>% distinct()
left_join(result2,  player_names, by=c("P_ID" = "PCODE"))
left_join(result, player_names, by=c("P_ID" = "PCODE"))
