pairs(NC.num)
cor(NC.num[,-6])
library(class)
set.seed(2)
#k=1?씪?븣
knn.pred <- knn(train=NC.train[,-6], test=NC.test, cl=NC.train$W, k=1)
table(NC.label, knn.pred)
#k=3?씪?븣
knn.pred.3 <- knn(train=NC.train[,-6],test=NC.test,cl=NC.train$W, k=3)
table(NC.label, knn.pred.3)
library(MASS)
NC.fit.LDA <- lda(W~., data=NC.num, subset = train)
NC.fit.LDA$prior
NC.fit.LDA$scaling
plot(NC.fit.LDA)
lda.pred <- predict(NC.fit.LDA,NC.test)
table(NC.label,lda.pred$class)
NC.fit.QDA <- qda(W~., data=NC.num, subset=train)
qda.pred <- predict(NC.fit.QDA, NC.test)
table(NC.label, qda.pred$class)
NC.fit.logit <- glm(W~.,data=NC.train, family = binomial)
NC.fit.logit.null <- glm(W~1,data = NC.train,family=binomial)
NC.fit.logit.FS=step(NC.fit.logit.null, scope = list(lower=NC.fit.logit.null, upper=NC.fit.logit),direction = "forward")
NC.fit.logit.FS.pred <- predict(NC.fit.logit.FS, newdata=NC.test,type="response")
logit.pred=as.factor(ifelse(NC.fit.logit.FS.pred>0.7,"LOSE","WIN")) #1:LOSE
table(NC.label, logit.pred)
mean(knn.pred != NC.label); mean(knn.pred.3 !=NC.label)
mean(lda.pred$class !=NC.label)
mean(qda.pred$class !=NC.label)
mean(logit.pred !=NC.label)
cost <- matrix(c(0,1,5,0), nrow=2, ncol=2)
sum(table(NC.label,knn.pred.3)*cost)/(max(cost)*length(NC.label))
sum(table(NC.label,lda.pred$class) * cost) / (max(cost) * length(NC.label))
sum(table(NC.label,qda.pred$class) * cost) / (max(cost) * length(NC.label))
sum(table(NC.label,logit.pred) * cost) / (max(cost) * length(NC.label))
knn.cm=table(NC.label,knn.pred.3); lda.cm=table(NC.label, lda.pred$class)
qda.cm=table(NC.label, qda.pred$class); logit.cm=table(NC.label,logit.pred)
knn.cm[2,2]/sum(knn.cm[2,]);lda.cm[2,2]/sum(lda.cm[2,]);qda.cm[2,2]/sum(qda.cm[2,]);logit.cm[2,2]/sum(qda.cm[2,])
knn.cm[1,1]/sum(knn.cm[1,]);lda.cm[1,1]/sum(lda.cm[1,]);qda.cm[1,1]/sum(qda.cm[1,]);logit.cm[1,1]/sum(logit.cm[1,])
library(PRROC)
PRROC_obj1 <- roc.curve(scores.class0 = lda.pred$posterior[,1],
weights.class0 = 1*(NC.label=="LOSE"),curve = TRUE)
plot(PRROC_obj1)
plot(PRROC_obj1)
window()
plot(PRROC_obj1)
NC <- read.csv(choose.files())
NC.num <- NC[,c(4,8,11,16,19,21)] # ?씠?썑 濡쒖??뒪?떛 ?쉶洹遺꾩꽍 蹂?닔 怨쇰떎 臾몄젣濡? ?씪?떒 5媛? ?빆紐⑸쭔 ?꽑?깮?빐?꽌 吏꾪뻾(?뀒?뒪?듃)
head(NC.num)
NC <- read.csv(choose.files())
NC.num <- NC[,c(4,8,11,16,19,21)] # ?씠?썑 濡쒖??뒪?떛 ?쉶洹遺꾩꽍 蹂?닔 怨쇰떎 臾몄젣濡? ?씪?떒 5媛? ?빆紐⑸쭔 ?꽑?깮?빐?꽌 吏꾪뻾(?뀒?뒪?듃)
set.seed(1)
nrow(NC)
ceiling(0.7*nrow(NC))
(0.7*nrow(NC))
0.7*nrow(NC)
NC.train <- NC.num[train,]
NC.test <- NC.num[-train, -6]
NC.label <- NC.num[-train, 6]
dim(NC)
dim(NC.num)
sum(NC.num$W=="WIN")/length(NC$W)
length(NC$W)
NC.num$W=="WIN"
sum(c(TRUE, TRUE))
names(NC.num)
str(NC.num)
summary(NC.num)
pairs(NC.num)
cor(NC.num[,-6])
library(class)
set.seed(2)
#k=1?씪?븣
knn.pred <- knn(train=NC.train[,-6], test=NC.test, cl=NC.train$W, k=1)
mean(stat_2016$S2)
path <- "../김정인/작업중/2016_final.xlsx"
team_list <- kbo$team %>% filter(year==2016) %>% select(T_ID)
library(readxl)
library(dplyr)
load(file="kbo.RData")
path <- "../김정인/작업중/2016_final.xlsx"
team_list <- kbo$team %>% filter(year==2016) %>% select(T_ID)
kbo$team %>% filter(year==2016) %>% select(T_ID)
kbo$team
kbo$team %>% filter(year==2016)
kbo$team %>% filter(year==2016) %>% select(T_ID)
kbo$team %>% filter(year==2016)
library(readxl)
library(dplyr)
kbo$team %>% filter(year==2016) %>% select(T_ID)
kbo$team %>% filter(year==2016)
kbo$team %>% filter(year==2016) %>% select(T_ID)
kbo$team %>% filter(year==2016) %>% select(T_ID)
kbo$team %>% filter(year==2016) %>% select(T_ID)
kbo$team %>% filter(year==2016)
stat_2016 <- data.frame()
for (t in team_list$T_ID) {
temp_table <- read_excel(path = path, sheet = t )
stat_2016 <- bind_rows(stat_2016, temp_table)
}
str(stat_2016)
str(stat_2016)
any(is.na(stat_2016 %>% select(-S2)))
any(is.na(stat_2016 %>% select(-S2)))
stat_2016$S2[which(is.na(stat_2016$S2))] <- mean(stat_2016$S2) # 도루성공률의 결측치에 0을 대입
library(class)
set.seed(2)
#k=1?씪?븣
knn.pred <- knn(train=NC.train[,-6], test=NC.test, cl=NC.train$W, k=1)
table(NC.label, knn.pred)
Sys.setlocale("LC_ALL", "Korean")
Sys.getlocale()
l
l
library(readxl)
library(dplyr)
getwd()
path_head <- "../윤두희/"
path_tail <- "_팀투수.xlsx"
hitter_temp <- data.frame()
for(year in 2016:2020){
hitter_temp <- bind_rows(read_excel(paste0(path_head, year, path_tail)))
}
year
path_head <- "../윤두희/"
path_tail <- "_팀투수.xlsx"
hitter_temp <- data.frame()
for(year in 2016:2020){
hitter_temp <- bind_rows(hitter_temp, read_excel(paste0(path_head, year, path_tail)))
}
hitter_temp %>% select(G_ID, GDAY_DS, T_ID, "피안타율", "평균자책점", 실책, 병살타, 폭투)
hitter_temp %>% select(G_ID, GDAY_DS, T_ID)
hitter_temp %>% select(G_ID, GDAY_DS, T_ID)
hitter_temp %>% select(G_ID)
hitter_temp %>% dplyr::select(G_ID)
hitter_temp %>% dplyr::select(-VS_T_ID:CB_WHIP_RT)
hitter_temp %>% dplyr::select(G_ID, GDAY_DS, T_ID, 피안타율:폭투투)
hitter_temp %>% dplyr::select(G_ID, GDAY_DS, T_ID, 피안타율:폭투)
hitter_temp <- hitter_temp %>% dplyr::select(G_ID, GDAY_DS, T_ID, 피안타율:폭투)
path_head <- "../차청설/dt"
path_tail <- "_th_addvar.xlsx"
pitcher_temp <- data.frame()
for(year in 16:20){
pitcher_temp <- bind_rows(pitcher_temp, read_excel(paste0(path_head, year, path_tail)))
}
path_head <- "../차철성/dt"
path_tail <- "_th_addvar.xlsx"
pitcher_temp <- data.frame()
for(year in 16:20){
pitcher_temp <- bind_rows(pitcher_temp, read_excel(paste0(path_head, year, path_tail)))
}
year
team$2016$T_ID
for(team in c("", "", ))
)
team$2016
team$T_ID
path_head <- "../윤두희/"
path_tail <- "_팀투수.xlsx"
hitter_temp <- data.frame()
for(year in 2016:2020){
for(team in team_list$T_ID){
sheet <- read_excel(paste0(path_head, year, path_tail), sheet = team)
sheet <- sheet %>% mutate(T_ID= team)
hitter_temp <- bind_rows(hitter_temp, sheet)
}
}
kbo$team$T_NM
unique(kbo$team$T_NM)
path_head <- "../윤두희/"
path_tail <- "_팀투수.xlsx"
hitter_temp <- data.frame()
for(year in 2016:2020){
for(team in unique(kbo$team$T_NM)){
sheet <- read_excel(paste0(path_head, year, path_tail), sheet = team)
sheet <- sheet %>% mutate(T_ID= team)
hitter_temp <- bind_rows(hitter_temp, sheet)
}
}
path_head <- "../윤두희/"
path_tail <- "_팀투수.xlsx"
hitter_temp <- data.frame()
for(year in 2016:2020){
for(team in unique(kbo$team$T_NM)){
try(sheet <- read_excel(paste0(path_head, year, path_tail), sheet = team))
sheet <- sheet %>% mutate(T_ID= team)
hitter_temp <- bind_rows(hitter_temp, sheet)
}
}
kbo$team
path_head <- "../윤두희/"
path_tail <- "_팀투수.xlsx"
hitter_temp <- data.frame()
for(year in 2016:2020){
for(team in unique(kbo$team$T_NM)){
try(sheet <- read_excel(paste0(path_head, year, path_tail), sheet = team))
hitter_temp <- bind_rows(hitter_temp, sheet)
}
}
sheet
tail(hitter_temp)
path_head <- "../윤두희/"
path_tail <- "_팀투수.xlsx"
hitter_temp <- data.frame()
for(year in 2016:2020){
for(team in unique(kbo$team$T_NM)){
try(sheet <- read_excel(paste0(path_head, year, path_tail), sheet = team))
hitter_temp <- bind_rows(hitter_temp, sheet)
print(past(year, team ))
}
}
path_head <- "../윤두희/"
path_tail <- "_팀투수.xlsx"
hitter_temp <- data.frame()
for(year in 2016:2020){
for(team in unique(kbo$team$T_NM)){
try(sheet <- read_excel(paste0(path_head, year, path_tail), sheet = team))
hitter_temp <- bind_rows(hitter_temp, sheet)
print(paste(year, team ))
}
}
View(hitter_temp)
View(hitter_temp)
paste0(path_head, year, path_tail)
team
any(is.na(hitter_temp))
hitter_temp %>% distinct(G_ID, T_ID) %>% tally()
hitter_temp <- hitter_temp %>% distinct(G_ID, T_ID) %>% dplyr::select(G_ID, GDAY_DS, T_ID, 피안타율:폭투)
hitter_temp <- hitter_temp %>% distinct(G_ID, T_ID) %>% dplyr::select(G_ID, GDAY_DS, T_ID)
hitter_temp <- hitter_temp %>% distinct() %>% dplyr::select(G_ID, GDAY_DS, T_ID, 피안타율:폭투)
inner_join(pitcher_temp, hitter_temp, by=c("G_ID", "GDAY_DS", "T_ID"), suffix=C(".pitcher", ".hitter"))
## 데이터 합치기
data <- inner_join(pitcher_temp, hitter_temp, by=c("G_ID", "GDAY_DS", "T_ID"), suffix=C(".x", ".y"))
## 데이터 합치기
data <- inner_join(pitcher_temp, hitter_temp, by=c("G_ID", "GDAY_DS", "T_ID"))
data
pitcher_temp <- pitcher_temp %>% dplyr::select(G_ID, GDAY_DS, T_ID, 타율:도루성공률)
## 데이터 합치기
data <- inner_join(pitcher_temp, hitter_temp, by=c("G_ID", "GDAY_DS", "T_ID"))
data
## 데이터 합치기
data <- inner_join(hitter_temp,pitcher_temp,  by=c("G_ID", "GDAY_DS", "T_ID"))
data <- data %>% rename(P1=피안타율율)
data <- data %>% rename(P1=피안타율)
data %>% rename(G_ID, D, ~)
data %>% rename(G_ID, D, .)
data <- data %>% rename(P1=피안타율,
P2=평균자책점,
P3=탈삼진율,
P4=이닝당 출루허용률                          )
data <- inner_join(hitter_temp,pitcher_temp,  by=c("G_ID", "GDAY_DS", "T_ID"))
data <- data %>% rename(P1=피안타율,
P2=평균자책점,
P3=탈삼진율,
P4="이닝당 출루허용률"                          )
data <- data %>% rename(P1=피안타율,
P2=평균자책점,
P3=탈삼진율,
P4="이닝당 출루허용률",
D1=실책,
D2=병살타,
D3=폭투,
B1=타율,
B2=선구안,
B3=출루율,
B4=장타율,
C1=홈런,
C2=타점율,
C3=득점권타율,
C4=잔루,
S1=도루,
S2=도루성공률)
## 데이터 합치기
data <- inner_join(hitter_temp,pitcher_temp,  by=c("G_ID", "GDAY_DS", "T_ID"))
data <- data %>% rename(P1=피안타율,
P2=평균자책점,
P3=탈삼진율,
P4="이닝당 출루허용률",
D1=실책,
D2=병살타,
D3=폭투,
B1=타율,
B2=선구안,
B3=출루율,
B4=장타율,
C1=홈런,
C2=타점율,
C3=득점권타율,
C4=잔루,
S1=도루,
S2=도루성공률)
path_head <- "../윤두희/"
path_tail <- "_팀투수.xlsx"
hitter_temp <- data.frame()
for(year in 2016:2020){
for(team in unique(kbo$team$T_NM)){
try(sheet <- read_excel(paste0(path_head, year, path_tail), sheet = team))
hitter_temp <- bind_rows(hitter_temp, sheet)
print(paste(year, team ))
}
}
hitter_temp <- hitter_temp %>% distinct() %>% dplyr::select(G_ID, GDAY_DS, T_ID, WLS, 피안타율:폭투)
## 타자데이터 모으기 - 철성
path_head <- "../차철성/dt"
path_tail <- "_th_addvar.xlsx"
pitcher_temp <- data.frame()
for(year in 16:20){
pitcher_temp <- bind_rows(pitcher_temp, read_excel(paste0(path_head, year, path_tail)))
}
pitcher_temp <- pitcher_temp %>% dplyr::select(G_ID, GDAY_DS, T_ID, WLS, 타율:도루성공률)
## 데이터 합치기
data <- inner_join(hitter_temp,pitcher_temp,  by=c("G_ID", "GDAY_DS", "T_ID", "WLS"))
data <- data %>% rename(P1=피안타율,
P2=평균자책점,
P3=탈삼진율,
P4="이닝당 출루허용률",
D1=실책,
D2=병살타,
D3=폭투,
B1=타율,
B2=선구안,
B3=출루율,
B4=장타율,
C1=홈런,
C2=타점율,
C3=득점권타율,
C4=잔루,
S1=도루,
S2=도루성공률)
path_head <- "../윤두희/"
path_tail <- "_팀투수.xlsx"
hitter_temp <- data.frame()
for(year in 2016:2020){
for(team in unique(kbo$team$T_NM)){
try(sheet <- read_excel(paste0(path_head, year, path_tail), sheet = team))
hitter_temp <- bind_rows(hitter_temp, sheet)
print(paste(year, team ))
}
}
hitter_temp <- hitter_temp %>% distinct() %>% dplyr::select(G_ID, GDAY_DS, T_ID, WLS, 피안타율:폭투)
## 타자데이터 모으기 - 철성
path_head <- "../차철성/dt"
path_tail <- "_th_addvar.xlsx"
pitcher_temp <- data.frame()
for(year in 16:20){
pitcher_temp <- bind_rows(pitcher_temp, read_excel(paste0(path_head, year, path_tail)))
}
pitcher_temp <- pitcher_temp %>% dplyr::select(G_ID, GDAY_DS, T_ID, 타율:도루성공률)
## 데이터 합치기
data <- inner_join(hitter_temp,pitcher_temp,  by=c("G_ID", "GDAY_DS", "T_ID"))
data <- data %>% rename(P1=피안타율,
P2=평균자책점,
P3=탈삼진율,
P4="이닝당 출루허용률",
D1=실책,
D2=병살타,
D3=폭투,
B1=타율,
B2=선구안,
B3=출루율,
B4=장타율,
C1=홈런,
C2=타점율,
C3=득점권타율,
C4=잔루,
S1=도루,
S2=도루성공률)
substr("20160044", 1, 4)
data %>% mutate(W=ifelse(WLS=="L", "LOOSE", "WIN")) %>%
# WS : 이기면 3, 지면 0, 비기면 1
mutate(WS=ifelse(WLS=="W", 3, ifelse(WLS=="D", 1, 0))) %>%
# WC : WS의 누계
mutate(WC=cumall(WS))
면 "LOOSE", 비겨도 "WIN"
data %>% mutate(W=ifelse(WLS=="L", "LOOSE", "WIN")) %>%
# WS : 이기면 3, 지면 0, 비기면 1
mutate(WS=ifelse(WLS=="W", 3, ifelse(WLS=="D", 1, 0))) %>%
# WC : WS의 누계
mutate(WC=cumsum(WS))
data %>% mutate(W=ifelse(WLS=="L", "LOOSE", "WIN")) %>%
# WS : 이기면 3, 지면 0, 비기면 1
mutate(WS=ifelse(WLS=="W", 3, ifelse(WLS=="D", 1, 0))) %>%
# WC : WS의 누계
mutate(WC=cumsum(WS)) %>%
# YEAR : 시즌
mutate(YEAR= substr(G_ID, 1, 4))
## 데이터 전처리
# W :  이기면 "WIN", 지면 "LOOSE", 비겨도 "WIN"
data <- data %>% mutate(W=ifelse(WLS=="L", "LOOSE", "WIN")) %>%
# WS : 이기면 3, 지면 0, 비기면 1
mutate(WS=ifelse(WLS=="W", 3, ifelse(WLS=="D", 1, 0))) %>%
# WC : WS의 누계
mutate(WC=cumsum(WS)) %>%
# YEAR : 시즌
mutate(YEAR= substr(G_ID, 1, 4))
data
# W : factor로 변환
data$W <- as.factor(data$W)
data %>% group_by(YEAR) %>% summarise(mean(S2))
data %>% group_by(YEAR) %>% summarise(mean(S2, na.rm = TRUE))
which(is.na(data$S2))
avg_S2 <- data %>% group_by(YEAR, T_ID) %>% summarise(mean(S2, na.rm = TRUE))
avg_S2
data$S2[which(is.na(data$S2))]
avg_S2
team_list$T_ID
data %>% filter(YEAR==as.character(year), T_ID==team, !is.na(S2))
year <- 2016; team <- "HH"
data %>% filter(YEAR==as.character(year), T_ID==team, !is.na(S2))
data %>% filter(YEAR==as.character(year), T_ID==team, is.na(S2))
# S2의 결측치를 시즌별 도루성공률평균으로 대체
avg_S2 <- data %>% group_by(YEAR, T_ID) %>% summarise(mean = mean(S2, na.rm = TRUE))
avg_S2
avg_S2 %>% filter(YEAR==year, T_ID==team)) %>% dplyr::select(mean)
avg_S2 %>% filter(YEAR==year, T_ID==team) %>% dplyr::select(mean)
avg_S2 %>% filter(YEAR==year, T_ID==team)
avg_S2 %>% filter(YEAR==year, T_ID==team) %>% ungroup() %>% dplyr::select(mean)
data %>% filter(YEAR==year, T_ID==team, is.na(S2)) %>%
transmute(S2=avg_S2 %>% filter(YEAR==year, T_ID==team) %>% ungroup() %>% dplyr::select(mean))
temp <- avg_S2 %>% filter(YEAR==year, T_ID==team) %>% ungroup() %>% dplyr::select(mean)
str(temp)
as.vector(temp)
as.numeric(temp)
data %>% filter(YEAR==year, T_ID==team, is.na(S2)) %>%
transmute(S2=avg_S2 %>% filter(YEAR==year, T_ID==team) %>% ungroup() %>% dplyr::select(mean) %>% as.numeric())
data %>%
transmute_if(YEAR==year, T_ID==team, is.na(S2), S2=avg_S2 %>% filter(YEAR==year, T_ID==team) %>% ungroup() %>% dplyr::select(mean) %>% as.numeric())
?transmute_if
data$S2[which(YEAR==year, T_ID==team, is.na(S2))]
data$S2[which(data$YEAR==year, data$T_ID==team, is.na(data$S2))]
data$S2[which(data$YEAR==year& data$T_ID==team & is.na(data$S2))]
for(year in 2016:2020){
for(team in team_list$T_ID){
year <- as.character(year)
avg_S2_year_team <- avg_S2$mean[which(avg_S2$YEAR==year & avg_S2$T_ID==team)]
data$S2[which(data$YEAR==year& data$T_ID==team & is.na(data$S2))] <- avg_S2_year_team
}
}
data$S2
str(data)
# YEAR : int로 변환
data$YEAR <- as.integer(data$YEAR)
# YEAR : num으로 변환
data$YEAR <- as.numeric(data$YEAR)
data %>% group_by(YEAR, T_ID) %>% summarise(nth(P1), nth(P2), nth(P3), nth(P4))
data %>% group_by(YEAR, T_ID) %>% mutate(p1=nth(P1), p2=nth(P2), p3=nth(P3), p4=nth(P4))
data %>% group_by(YEAR, T_ID) %>% summarise(IQR(P1))
data %>% group_by(YEAR, T_ID) %>% summarise(quantile(P1))
summary(data$P1)
summary(data$P1 %>% filter(YEAR==2016, T_ID="HH"))
summary(data %>% filter(YEAR==2016, T_ID="HH") %>% select(P1))
summary(data %>% filter(YEAR==2016, T_ID="HH") %>% select(P1) %>% as.vector())
data %>% filter(YEAR==2016, T_ID="HH") %>% select(P1)
summary(data %>% filter(YEAR==2016, T_ID=="HH") %>% select(P1) %>% as.vector())
summary(data %>% filter(YEAR==2016, T_ID=="HH") %>% dplyr::select(P1) %>% as.vector())
data %>% group_by(YEAR, T_ID) %>% summarise(quantile(P1))
data %>% group_by(YEAR, T_ID) %>% summarise(quantile(P1, 1))
data %>% group_by(YEAR, T_ID) %>% summarise(quantile(P1, 2))
data %>% group_by(YEAR, T_ID) %>% summarise(quantile(P1, 0))
data %>% group_by(YEAR, T_ID) %>% summarise(quantile(P1, 0.25))
data %>% group_by(YEAR, T_ID) %>% mutate(p1= ifelse(P1< quantile(P1, 0.25), 0, ifelse(P1< quantile(P1, 0.75)), (P1-qauntile(P1, 0.25))/IQR(P1), 1))
data %>% group_by(YEAR, T_ID) %>% mutate(p1= ifelse(P1< quantile(P1, 0.25),    0,
ifelse(P1< quantile(P1, 0.75),    (P1-qauntile(P1, 0.25))/IQR(P1),   1)  )   )
data %>% group_by(YEAR, T_ID) %>% mutate(p1= ifelse(P1< quantile(P1, 0.25),    0,
ifelse(P1< quantile(P1, 0.75),    (P1-quantile(P1, 0.25))/IQR(P1),   1)  )   )
P1
data_norm <- data %>% group_by(YEAR, T_ID) %>%
mutate(p1= ifelse(P1< quantile(P1, 0.25), 0, ifelse(P1< quantile(P1, 0.75), (P1-quantile(P1, 0.25))/IQR(P1), 1))) %>%
mutate(p2= ifelse(P2< quantile(P2, 0.25), 0, ifelse(P2< quantile(P2, 0.75), (P2-quantile(P2, 0.25))/IQR(P2), 1))) %>%
mutate(p3= ifelse(P3< quantile(P3, 0.25), 0, ifelse(P3< quantile(P3, 0.75), (P3-quantile(P3, 0.25))/IQR(P3), 1))) %>%
mutate(p4= ifelse(P4< quantile(P4, 0.25), 0, ifelse(P4< quantile(P4, 0.75), (P4-quantile(P4, 0.25))/IQR(P4), 1))) %>%
mutate(d1= ifelse(D1< quantile(D1, 0.25), 0, ifelse(D1< quantile(D1, 0.75), (D1-quantile(D1, 0.25))/IQR(D1), 1))) %>%
mutate(d2= ifelse(D2< quantile(D2, 0.25), 0, ifelse(D2< quantile(D2, 0.75), (D2-quantile(D2, 0.25))/IQR(D2), 1))) %>%
mutate(d3= ifelse(D3< quantile(D3, 0.25), 0, ifelse(D3< quantile(D3, 0.75), (D3-quantile(D3, 0.25))/IQR(D3), 1))) %>%
mutate(b1= ifelse(B1< quantile(B1, 0.25), 0, ifelse(B1< quantile(B1, 0.75), (B1-quantile(B1, 0.25))/IQR(B1), 1))) %>%
mutate(b2= ifelse(B2< quantile(B2, 0.25), 0, ifelse(B2< quantile(B2, 0.75), (B2-quantile(B2, 0.25))/IQR(B2), 1))) %>%
mutate(b3= ifelse(B3< quantile(B3, 0.25), 0, ifelse(B3< quantile(B3, 0.75), (B3-quantile(B3, 0.25))/IQR(B3), 1))) %>%
mutate(b4= ifelse(B4< quantile(B4, 0.25), 0, ifelse(B4< quantile(B4, 0.75), (B4-quantile(B4, 0.25))/IQR(B4), 1))) %>%
mutate(c1= ifelse(C1< quantile(C1, 0.25), 0, ifelse(C1< quantile(C1, 0.75), (C1-quantile(C1, 0.25))/IQR(C1), 1))) %>%
mutate(c2= ifelse(C2< quantile(C2, 0.25), 0, ifelse(C2< quantile(C2, 0.75), (C2-quantile(C2, 0.25))/IQR(C2), 1))) %>%
mutate(c3= ifelse(C3< quantile(C3, 0.25), 0, ifelse(C3< quantile(C3, 0.75), (C3-quantile(C3, 0.25))/IQR(C3), 1))) %>%
mutate(c4= ifelse(C4< quantile(C4, 0.25), 0, ifelse(C4< quantile(C4, 0.75), (C4-quantile(C4, 0.25))/IQR(C4), 1))) %>%
mutate(s1= ifelse(S1< quantile(S1, 0.25), 0, ifelse(S1< quantile(S1, 0.75), (S1-quantile(S1, 0.25))/IQR(S1), 1))) %>%
mutate(s2= ifelse(S2< quantile(S2, 0.25), 0, ifelse(S2< quantile(S2, 0.75), (S2-quantile(S2, 0.25))/IQR(S2), 1)))
str(data_norm)
data_norm <- data %>% group_by(YEAR, T_ID) %>%
mutate(p1= ifelse(P1< quantile(P1, 0.25), 0, ifelse(P1< quantile(P1, 0.75), (P1-quantile(P1, 0.25))/IQR(P1), 1))) %>%
mutate(p2= ifelse(P2< quantile(P2, 0.25), 0, ifelse(P2< quantile(P2, 0.75), (P2-quantile(P2, 0.25))/IQR(P2), 1))) %>%
mutate(p3= ifelse(P3< quantile(P3, 0.25), 0, ifelse(P3< quantile(P3, 0.75), (P3-quantile(P3, 0.25))/IQR(P3), 1))) %>%
mutate(p4= ifelse(P4< quantile(P4, 0.25), 0, ifelse(P4< quantile(P4, 0.75), (P4-quantile(P4, 0.25))/IQR(P4), 1))) %>%
mutate(d1= ifelse(D1< quantile(D1, 0.25), 0, ifelse(D1< quantile(D1, 0.75), (D1-quantile(D1, 0.25))/IQR(D1), 1))) %>%
mutate(d2= ifelse(D2< quantile(D2, 0.25), 0, ifelse(D2< quantile(D2, 0.75), (D2-quantile(D2, 0.25))/IQR(D2), 1))) %>%
mutate(d3= ifelse(D3< quantile(D3, 0.25), 0, ifelse(D3< quantile(D3, 0.75), (D3-quantile(D3, 0.25))/IQR(D3), 1))) %>%
mutate(b1= ifelse(B1< quantile(B1, 0.25), 0, ifelse(B1< quantile(B1, 0.75), (B1-quantile(B1, 0.25))/IQR(B1), 1))) %>%
mutate(b2= ifelse(B2< quantile(B2, 0.25), 0, ifelse(B2< quantile(B2, 0.75), (B2-quantile(B2, 0.25))/IQR(B2), 1))) %>%
mutate(b3= ifelse(B3< quantile(B3, 0.25), 0, ifelse(B3< quantile(B3, 0.75), (B3-quantile(B3, 0.25))/IQR(B3), 1))) %>%
mutate(b4= ifelse(B4< quantile(B4, 0.25), 0, ifelse(B4< quantile(B4, 0.75), (B4-quantile(B4, 0.25))/IQR(B4), 1))) %>%
mutate(c1= ifelse(C1< quantile(C1, 0.25), 0, ifelse(C1< quantile(C1, 0.75), (C1-quantile(C1, 0.25))/IQR(C1), 1))) %>%
mutate(c2= ifelse(C2< quantile(C2, 0.25), 0, ifelse(C2< quantile(C2, 0.75), (C2-quantile(C2, 0.25))/IQR(C2), 1))) %>%
mutate(c3= ifelse(C3< quantile(C3, 0.25), 0, ifelse(C3< quantile(C3, 0.75), (C3-quantile(C3, 0.25))/IQR(C3), 1))) %>%
mutate(c4= ifelse(C4< quantile(C4, 0.25), 0, ifelse(C4< quantile(C4, 0.75), (C4-quantile(C4, 0.25))/IQR(C4), 1))) %>%
mutate(s1= ifelse(S1< quantile(S1, 0.25), 0, ifelse(S1< quantile(S1, 0.75), (S1-quantile(S1, 0.25))/IQR(S1), 1))) %>%
mutate(s2= ifelse(S2< quantile(S2, 0.25), 0, ifelse(S2< quantile(S2, 0.75), (S2-quantile(S2, 0.25))/IQR(S2), 1))) %>%
ungroup()
str(data_norm)
plot(data_norm)
plot(data_norm$s1)
plot(data_norm$s2)
plot(data_norm$p1)
plot(data_norm$p2)
write.csv(data_norm, file="data_norm")
write.csv(data_norm, file="data_norm.csv")
