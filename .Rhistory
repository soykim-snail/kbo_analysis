# YEAR : 시즌
mutate(YEAR= substr(G_ID, 1, 4)) %>%
# 시즌과 팀으로 그루핑
group_by(YEAR, T_ID) %>%
# W :  이기면 "WIN", 지면 "LOOSE", 비겨도 "WIN"
mutate(W=ifelse(WLS=="L", "LOOSE", "WIN")) %>%
# WS : 이기면 3, 지면 0, 비기면 1
mutate(WS=ifelse(WLS=="W", 3, ifelse(WLS=="D", 1, 0))) %>%
# WC : WS의 누계
mutate(WC=cumsum(WS)) %>% tail
data %>%
# YEAR : 시즌
mutate(YEAR= substr(G_ID, 1, 4)) %>%
# 시즌과 팀으로 그루핑
group_by(YEAR, T_ID) %>%
# W :  이기면 "WIN", 지면 "LOOSE", 비겨도 "WIN"
mutate(W=ifelse(WLS=="L", "LOOSE", "WIN")) %>%
# WS : 이기면 3, 지면 0, 비기면 1
mutate(WS=ifelse(WLS=="W", 3, ifelse(WLS=="D", 1, 0))) %>%
# WC : WS의 누계
mutate(WC=cumsum(WS)) %>% tail
data %>%
# YEAR : 시즌
mutate(YEAR= substr(G_ID, 1, 4)) %>%
# 시즌과 팀으로 그루핑
group_by(YEAR, T_ID) %>%
# W :  이기면 "WIN", 지면 "LOOSE", 비겨도 "WIN"
mutate(W=ifelse(WLS=="L", "LOOSE", "WIN")) %>%
# WS : 이기면 3, 지면 0, 비기면 1
mutate(WS=ifelse(WLS=="W", 3, ifelse(WLS=="D", 1, 0))) %>%
# WC : WS의 누계
mutate(WC=cumsum(WS)) %>% tail(70)
data <- data %>%
# YEAR : 시즌
mutate(YEAR= substr(G_ID, 1, 4)) %>%
# 시즌과 팀으로 그루핑
group_by(YEAR, T_ID) %>%
# W :  이기면 "WIN", 지면 "LOOSE", 비겨도 "WIN"
mutate(W=ifelse(WLS=="L", "LOOSE", "WIN")) %>%
# WS : 이기면 3, 지면 0, 비기면 1
mutate(WS=ifelse(WLS=="W", 3, ifelse(WLS=="D", 1, 0))) %>%
# WC : WS의 누계
mutate(WC=cumsum(WS)) %>% tail(70)
# S2의 결측치를 시즌별 도루성공률평균으로 대체
avg_S2 <- data %>% group_by(YEAR, T_ID) %>% summarise(mean = mean(S2, na.rm = TRUE))
for(year in 2016:2020){
for(team in team_list$T_ID){
year <- as.character(year)
avg_S2_year_team <- avg_S2$mean[which(avg_S2$YEAR==year & avg_S2$T_ID==team)]
data$S2[which(data$YEAR==year& data$T_ID==team & is.na(data$S2))] <- avg_S2_year_team
}
}
# W : factor로 변환
data$W <- as.factor(data$W)
# YEAR : num으로 변환
data$YEAR <- as.numeric(data$YEAR)
data_norm <- data %>% group_by(YEAR, T_ID) %>%
mutate(p1= ifelse(P1< quantile(P1, 0.25), 0, ifelse(P1< quantile(P1, 0.75), (P1-quantile(P1, 0.25))/IQR(P1), 1))) %>%
mutate(p2= ifelse(P2< quantile(P2, 0.25), 0, ifelse(P2< quantile(P2, 0.75), (P2-quantile(P2, 0.25))/IQR(P2), 1))) %>%
mutate(p3= ifelse(P3< quantile(P3, 0.25), 0, ifelse(P3< quantile(P3, 0.75), (P3-quantile(P3, 0.25))/IQR(P3), 1))) %>%
mutate(p4= ifelse(P4< quantile(P4, 0.25), 0, ifelse(P4< quantile(P4, 0.75), (P4-quantile(P4, 0.25))/IQR(P4), 1))) %>%
mutate(d1= ifelse(D1< quantile(D1, 0.25), 0, ifelse(D1< quantile(D1, 0.75), (D1-quantile(D1, 0.25))/IQR(D1), 1))) %>%
mutate(d2= ifelse(D2< quantile(D2, 0.25), 0, ifelse(D2< quantile(D2, 0.75), (D2-quantile(D2, 0.25))/IQR(D2), 1))) %>%
mutate(d3= ifelse(D3< quantile(D3, 0.25), 0, ifelse(D3< quantile(D3, 0.75), (D3-quantile(D3, 0.25))/IQR(D3), 1))) %>%
mutate(b1= ifelse(B1< quantile(B1, 0.25), 0, ifelse(B1< quantile(B1, 0.75), (B1-quantile(B1, 0.25))/IQR(B1), 1))) %>%
mutate(b2= ifelse(B2< quantile(B2, 0.25), 0, ifelse(B2< quantile(B2, 0.75), (B2-quantile(B2, 0.25))/IQR(B2), 1))) %>%
mutate(b3= ifelse(B3< quantile(B3, 0.25), 0, ifelse(B3< quantile(B3, 0.75), (B3-quantile(B3, 0.25))/IQR(B3), 1))) %>%
mutate(b4= ifelse(B4< quantile(B4, 0.25), 0, ifelse(B4< quantile(B4, 0.75), (B4-quantile(B4, 0.25))/IQR(B4), 1))) %>%
mutate(c1= ifelse(C1< quantile(C1, 0.25), 0, ifelse(C1< quantile(C1, 0.75), (C1-quantile(C1, 0.25))/IQR(C1), 1))) %>%
mutate(c2= ifelse(C2< quantile(C2, 0.25), 0, ifelse(C2< quantile(C2, 0.75), (C2-quantile(C2, 0.25))/IQR(C2), 1))) %>%
mutate(c3= ifelse(C3< quantile(C3, 0.25), 0, ifelse(C3< quantile(C3, 0.75), (C3-quantile(C3, 0.25))/IQR(C3), 1))) %>%
mutate(c4= ifelse(C4< quantile(C4, 0.25), 0, ifelse(C4< quantile(C4, 0.75), (C4-quantile(C4, 0.25))/IQR(C4), 1))) %>%
mutate(s1= ifelse(S1< quantile(S1, 0.25), 0, ifelse(S1< quantile(S1, 0.75), (S1-quantile(S1, 0.25))/IQR(S1), 1))) %>%
mutate(s2= ifelse(S2< quantile(S2, 0.25), 0, ifelse(S2< quantile(S2, 0.75), (S2-quantile(S2, 0.25))/IQR(S2), 1))) %>%
ungroup()
# 정규화(?) 한 데이터를 저장
save(data_norm, file="data_norm.RData")
write.csv(data_norm, file="data_norm.csv")
data_norm_inner <- data %>% group_by(YEAR, T_ID) %>%
mutate(p1= ifelse(P1< quantile(P1, 0.25)-1.5*IQR(P1), 0, ifelse(P1< quantile(P1, 0.75)+1.5*IQR(P1), (P1-quantile(P1, 0.25)+1.5*IQR(P1))/(IQR(P1)*4), 1))) %>%
mutate(p2= ifelse(P2< quantile(P2, 0.25)-1.5*IQR(P2), 0, ifelse(P2< quantile(P2, 0.75)+1.5*IQR(P2), (P2-quantile(P2, 0.25)+1.5*IQR(P2))/(IQR(P2)*4), 1))) %>%
mutate(p3= ifelse(P3< quantile(P3, 0.25)-1.5*IQR(P3), 0, ifelse(P3< quantile(P3, 0.75)+1.5*IQR(P3), (P3-quantile(P3, 0.25)+1.5*IQR(P3))/(IQR(P3)*4), 1))) %>%
mutate(p4= ifelse(P4< quantile(P4, 0.25)-1.5*IQR(P4), 0, ifelse(P4< quantile(P4, 0.75)+1.5*IQR(P4), (P4-quantile(P4, 0.25)+1.5*IQR(P4))/(IQR(P4)*4), 1))) %>%
mutate(d1= ifelse(D1< quantile(D1, 0.25)-1.5*IQR(D1), 0, ifelse(D1< quantile(D1, 0.75)+1.5*IQR(D1), (D1-quantile(D1, 0.25)+1.5*IQR(D1))/(IQR(D1)*4), 1))) %>%
mutate(d2= ifelse(D2< quantile(D2, 0.25)-1.5*IQR(D2), 0, ifelse(D2< quantile(D2, 0.75)+1.5*IQR(D2), (D2-quantile(D2, 0.25)+1.5*IQR(D2))/(IQR(D2)*4), 1))) %>%
mutate(d3= ifelse(D3< quantile(D3, 0.25)-1.5*IQR(D3), 0, ifelse(D3< quantile(D3, 0.75)+1.5*IQR(D3), (D3-quantile(D3, 0.25)+1.5*IQR(D3))/(IQR(D3)*4), 1))) %>%
mutate(b1= ifelse(B1< quantile(B1, 0.25)-1.5*IQR(B1), 0, ifelse(B1< quantile(B1, 0.75)+1.5*IQR(B1), (B1-quantile(B1, 0.25)+1.5*IQR(B1))/(IQR(B1)*4), 1))) %>%
mutate(b2= ifelse(B2< quantile(B2, 0.25)-1.5*IQR(B2), 0, ifelse(B2< quantile(B2, 0.75)+1.5*IQR(B2), (B2-quantile(B2, 0.25)+1.5*IQR(B2))/(IQR(B2)*4), 1))) %>%
mutate(b3= ifelse(B3< quantile(B3, 0.25)-1.5*IQR(B3), 0, ifelse(B3< quantile(B3, 0.75)+1.5*IQR(B3), (B3-quantile(B3, 0.25)+1.5*IQR(B3))/(IQR(B3)*4), 1))) %>%
mutate(b4= ifelse(B4< quantile(B4, 0.25)-1.5*IQR(B4), 0, ifelse(B4< quantile(B4, 0.75)+1.5*IQR(B4), (B4-quantile(B4, 0.25)+1.5*IQR(B4))/(IQR(B4)*4), 1))) %>%
mutate(c1= ifelse(C1< quantile(C1, 0.25)-1.5*IQR(C1), 0, ifelse(C1< quantile(C1, 0.75)+1.5*IQR(C1), (C1-quantile(C1, 0.25)+1.5*IQR(C1))/(IQR(C1)*4), 1))) %>%
mutate(c2= ifelse(C2< quantile(C2, 0.25)-1.5*IQR(C2), 0, ifelse(C2< quantile(C2, 0.75)+1.5*IQR(C2), (C2-quantile(C2, 0.25)+1.5*IQR(C2))/(IQR(C2)*4), 1))) %>%
mutate(c3= ifelse(C3< quantile(C3, 0.25)-1.5*IQR(C3), 0, ifelse(C3< quantile(C3, 0.75)+1.5*IQR(C3), (C3-quantile(C3, 0.25)+1.5*IQR(C3))/(IQR(C3)*4), 1))) %>%
mutate(c4= ifelse(C4< quantile(C4, 0.25)-1.5*IQR(C4), 0, ifelse(C4< quantile(C4, 0.75)+1.5*IQR(C4), (C4-quantile(C4, 0.25)+1.5*IQR(C4))/(IQR(C4)*4), 1))) %>%
mutate(s1= ifelse(S1< quantile(S1, 0.25)-1.5*IQR(S1), 0, ifelse(S1< quantile(S1, 0.75)+1.5*IQR(S1), (S1-quantile(S1, 0.25)+1.5*IQR(S1))/(IQR(S1)*4), 1))) %>%
mutate(s2= ifelse(S2< quantile(S2, 0.25)-1.5*IQR(S2), 0, ifelse(S2< quantile(S2, 0.75)+1.5*IQR(S2), (S2-quantile(S2, 0.25)+1.5*IQR(S2))/(IQR(S2)*4), 1))) %>%
ungroup()
save(data_norm_inner, file="data_norm.RData")
write.csv(data_norm_inner, file="data_norm.csv")
data$GDAY_DS <- as.Date(as.character(data$GDAY_DS), "%Y%m%d")
data %>% filter(YEAR==2020) %>% group_by(T_ID)
data$GDAY_DS
## 투수데이터 모으기 - 두희
path_head <- "../윤두희/"
path_tail <- "_팀투수.xlsx"
hitter_temp <- data.frame()
for(year in 2016:2020){
for(team in unique(kbo$team$T_NM)){
try(sheet <- read_excel(paste0(path_head, year, path_tail), sheet = team))
hitter_temp <- bind_rows(hitter_temp, sheet)
print(paste(year, team ))
}
}
hitter_temp <- hitter_temp %>% distinct() %>% dplyr::select(G_ID, GDAY_DS, T_ID, WLS, 피안타율:폭투)
## 타자데이터 모으기 - 철성
path_head <- "../차철성/dt"
path_tail <- "_th_addvar.xlsx"
pitcher_temp <- data.frame()
for(year in 16:20){
pitcher_temp <- bind_rows(pitcher_temp, read_excel(paste0(path_head, year, path_tail)))
}
pitcher_temp <- pitcher_temp %>% dplyr::select(G_ID, GDAY_DS, T_ID, 타율:도루성공률)
## 데이터 합치기
data <- inner_join(hitter_temp,pitcher_temp,  by=c("G_ID", "GDAY_DS", "T_ID"))
data <- data %>% rename(P1=피안타율,
P2=평균자책점,
P3=탈삼진율,
P4="이닝당 출루허용률",
D1=실책,
D2=병살타,
D3=폭투,
B1=타율,
B2=선구안,
B3=출루율,
B4=장타율,
C1=홈런,
C2=타점율,
C3=득점권타율,
C4=잔루,
S1=도루,
S2=도루성공률)
## 데이터 전처리
data <- data %>%
# YEAR : 시즌
mutate(YEAR= substr(G_ID, 1, 4)) %>%
# 시즌과 팀으로 그루핑
group_by(YEAR, T_ID) %>%
# W :  이기면 "WIN", 지면 "LOOSE", 비겨도 "WIN"
mutate(W=ifelse(WLS=="L", "LOOSE", "WIN")) %>%
# WS : 이기면 3, 지면 0, 비기면 1
mutate(WS=ifelse(WLS=="W", 3, ifelse(WLS=="D", 1, 0))) %>%
# WC : WS의 누계
mutate(WC=cumsum(WS)) %>% tail(70)
# S2의 결측치를 시즌별 도루성공률평균으로 대체
avg_S2 <- data %>% group_by(YEAR, T_ID) %>% summarise(mean = mean(S2, na.rm = TRUE))
for(year in 2016:2020){
for(team in team_list$T_ID){
year <- as.character(year)
avg_S2_year_team <- avg_S2$mean[which(avg_S2$YEAR==year & avg_S2$T_ID==team)]
data$S2[which(data$YEAR==year& data$T_ID==team & is.na(data$S2))] <- avg_S2_year_team
}
}
# W : factor로 변환
data$W <- as.factor(data$W)
# YEAR : num으로 변환
data$YEAR <- as.numeric(data$YEAR)
data_norm_inner
path_head <- "../윤두희/"
path_tail <- "_팀투수.xlsx"
hitter_temp <- data.frame()
for(year in 2016:2020){
for(team in unique(kbo$team$T_NM)){
try(sheet <- read_excel(paste0(path_head, year, path_tail), sheet = team))
hitter_temp <- bind_rows(hitter_temp, sheet)
print(paste(year, team ))
}
}
hitter_temp <- hitter_temp %>% distinct() %>% dplyr::select(G_ID, GDAY_DS, T_ID, WLS, 피안타율:폭투)
## 타자데이터 모으기 - 철성
path_head <- "../차철성/dt"
path_tail <- "_th_addvar.xlsx"
pitcher_temp <- data.frame()
for(year in 16:20){
pitcher_temp <- bind_rows(pitcher_temp, read_excel(paste0(path_head, year, path_tail)))
}
pitcher_temp <- pitcher_temp %>% dplyr::select(G_ID, GDAY_DS, T_ID, 타율:도루성공률)
## 데이터 합치기
data <- inner_join(hitter_temp,pitcher_temp,  by=c("G_ID", "GDAY_DS", "T_ID"))
data <- data %>% rename(P1=피안타율,
P2=평균자책점,
P3=탈삼진율,
P4="이닝당 출루허용률",
D1=실책,
D2=병살타,
D3=폭투,
B1=타율,
B2=선구안,
B3=출루율,
B4=장타율,
C1=홈런,
C2=타점율,
C3=득점권타율,
C4=잔루,
S1=도루,
S2=도루성공률)
library(readxl)
#################################################################
#
# 팀별 데이터 (2016년~2020년)
#
#################################################################
## 투수데이터 모으기 - 두희
path_head <- "../윤두희/"
path_tail <- "_팀투수.xlsx"
hitter_temp <- data.frame()
for(year in 2016:2020){
for(team in unique(kbo$team$T_NM)){
try(sheet <- read_excel(paste0(path_head, year, path_tail), sheet = team))
hitter_temp <- bind_rows(hitter_temp, sheet)
print(paste(year, team ))
}
}
hitter_temp <- hitter_temp %>% distinct() %>% dplyr::select(G_ID, GDAY_DS, T_ID, WLS, 피안타율:폭투)
## 타자데이터 모으기 - 철성
path_head <- "../차철성/dt"
path_tail <- "_th_addvar.xlsx"
pitcher_temp <- data.frame()
for(year in 16:20){
pitcher_temp <- bind_rows(pitcher_temp, read_excel(paste0(path_head, year, path_tail)))
}
pitcher_temp <- pitcher_temp %>% dplyr::select(G_ID, GDAY_DS, T_ID, 타율:도루성공률)
## 데이터 합치기
data <- inner_join(hitter_temp,pitcher_temp,  by=c("G_ID", "GDAY_DS", "T_ID"))
data <- data %>% rename(P1=피안타율,
P2=평균자책점,
P3=탈삼진율,
P4="이닝당 출루허용률",
D1=실책,
D2=병살타,
D3=폭투,
B1=타율,
B2=선구안,
B3=출루율,
B4=장타율,
C1=홈런,
C2=타점율,
C3=득점권타율,
C4=잔루,
S1=도루,
S2=도루성공률)
data <- data %>%
# YEAR : 시즌
mutate(YEAR= substr(G_ID, 1, 4)) %>%
# 시즌과 팀으로 그루핑
group_by(YEAR, T_ID) %>%
# W :  이기면 "WIN", 지면 "LOOSE", 비겨도 "WIN"
mutate(W=ifelse(WLS=="L", "LOOSE", "WIN")) %>%
# WS : 이기면 3, 지면 0, 비기면 1
mutate(WS=ifelse(WLS=="W", 3, ifelse(WLS=="D", 1, 0))) %>%
# WC : WS의 누계
mutate(WC=cumsum(WS)) %>% tail(70)
# S2의 결측치를 시즌별 도루성공률평균으로 대체
avg_S2 <- data %>% group_by(YEAR, T_ID) %>% summarise(mean = mean(S2, na.rm = TRUE))
for(year in 2016:2020){
for(team in team_list$T_ID){
year <- as.character(year)
avg_S2_year_team <- avg_S2$mean[which(avg_S2$YEAR==year & avg_S2$T_ID==team)]
data$S2[which(data$YEAR==year& data$T_ID==team & is.na(data$S2))] <- avg_S2_year_team
}
}
# W : factor로 변환
data$W <- as.factor(data$W)
# YEAR : num으로 변환
data$YEAR <- as.numeric(data$YEAR)
hitter_temp
pitcher_temp
## 데이터 합치기
data <- inner_join(hitter_temp,pitcher_temp,  by=c("G_ID", "GDAY_DS", "T_ID"))
data <- data %>% rename(P1=피안타율,
P2=평균자책점,
P3=탈삼진율,
P4="이닝당 출루허용률",
D1=실책,
D2=병살타,
D3=폭투,
B1=타율,
B2=선구안,
B3=출루율,
B4=장타율,
C1=홈런,
C2=타점율,
C3=득점권타율,
C4=잔루,
S1=도루,
S2=도루성공률)
data <- data %>%
# YEAR : 시즌
mutate(YEAR= substr(G_ID, 1, 4)) %>%
# 시즌과 팀으로 그루핑
group_by(YEAR, T_ID) %>%
# W :  이기면 "WIN", 지면 "LOOSE", 비겨도 "WIN"
mutate(W=ifelse(WLS=="L", "LOOSE", "WIN")) %>%
# WS : 이기면 3, 지면 0, 비기면 1
mutate(WS=ifelse(WLS=="W", 3, ifelse(WLS=="D", 1, 0))) %>%
# WC : WS의 누계
mutate(WC=cumsum(WS)) %>% tail(70)
# S2의 결측치를 시즌별 도루성공률평균으로 대체
avg_S2 <- data %>% group_by(YEAR, T_ID) %>% summarise(mean = mean(S2, na.rm = TRUE))
for(year in 2016:2020){
for(team in team_list$T_ID){
year <- as.character(year)
avg_S2_year_team <- avg_S2$mean[which(avg_S2$YEAR==year & avg_S2$T_ID==team)]
data$S2[which(data$YEAR==year& data$T_ID==team & is.na(data$S2))] <- avg_S2_year_team
}
}
avg_S2
path_head <- "../윤두희/"
path_tail <- "_팀투수.xlsx"
hitter_temp <- data.frame()
for(year in 2016:2020){
for(team in unique(kbo$team$T_NM)){
try(sheet <- read_excel(paste0(path_head, year, path_tail), sheet = team))
hitter_temp <- bind_rows(hitter_temp, sheet)
print(paste(year, team ))
}
}
hitter_temp <- hitter_temp %>% distinct() %>% dplyr::select(G_ID, GDAY_DS, T_ID, WLS, 피안타율:폭투)
## 타자데이터 모으기 - 철성
path_head <- "../차철성/dt"
path_tail <- "_th_addvar.xlsx"
pitcher_temp <- data.frame()
for(year in 16:20){
pitcher_temp <- bind_rows(pitcher_temp, read_excel(paste0(path_head, year, path_tail)))
}
pitcher_temp <- pitcher_temp %>% dplyr::select(G_ID, GDAY_DS, T_ID, 타율:도루성공률)
## 데이터 합치기
data <- inner_join(hitter_temp,pitcher_temp,  by=c("G_ID", "GDAY_DS", "T_ID"))
data <- data %>% rename(P1=피안타율,
P2=평균자책점,
P3=탈삼진율,
P4="이닝당 출루허용률",
D1=실책,
D2=병살타,
D3=폭투,
B1=타율,
B2=선구안,
B3=출루율,
B4=장타율,
C1=홈런,
C2=타점율,
C3=득점권타율,
C4=잔루,
S1=도루,
S2=도루성공률)
## 데이터 전처리
data <- data %>%
# YEAR : 시즌
mutate(YEAR= substr(G_ID, 1, 4)) %>%
# 시즌과 팀으로 그루핑
group_by(YEAR, T_ID) %>%
# W :  이기면 "WIN", 지면 "LOOSE", 비겨도 "WIN"
mutate(W=ifelse(WLS=="L", "LOOSE", "WIN")) %>%
# WS : 이기면 3, 지면 0, 비기면 1
mutate(WS=ifelse(WLS=="W", 3, ifelse(WLS=="D", 1, 0))) %>%
# WC : WS의 누계
mutate(WC=cumsum(WS))
# S2의 결측치를 시즌별 도루성공률평균으로 대체
avg_S2 <- data %>% group_by(YEAR, T_ID) %>% summarise(mean = mean(S2, na.rm = TRUE))
for(year in 2016:2020){
for(team in team_list$T_ID){
year <- as.character(year)
avg_S2_year_team <- avg_S2$mean[which(avg_S2$YEAR==year & avg_S2$T_ID==team)]
data$S2[which(data$YEAR==year& data$T_ID==team & is.na(data$S2))] <- avg_S2_year_team
}
}
# W : factor로 변환
data$W <- as.factor(data$W)
# YEAR : num으로 변환
data$YEAR <- as.numeric(data$YEAR)
str(data)
data_norm <- data %>% group_by(YEAR, T_ID) %>%
mutate(p1= ifelse(P1< quantile(P1, 0.25), 0, ifelse(P1< quantile(P1, 0.75), (P1-quantile(P1, 0.25))/IQR(P1), 1))) %>%
mutate(p2= ifelse(P2< quantile(P2, 0.25), 0, ifelse(P2< quantile(P2, 0.75), (P2-quantile(P2, 0.25))/IQR(P2), 1))) %>%
mutate(p3= ifelse(P3< quantile(P3, 0.25), 0, ifelse(P3< quantile(P3, 0.75), (P3-quantile(P3, 0.25))/IQR(P3), 1))) %>%
mutate(p4= ifelse(P4< quantile(P4, 0.25), 0, ifelse(P4< quantile(P4, 0.75), (P4-quantile(P4, 0.25))/IQR(P4), 1))) %>%
mutate(d1= ifelse(D1< quantile(D1, 0.25), 0, ifelse(D1< quantile(D1, 0.75), (D1-quantile(D1, 0.25))/IQR(D1), 1))) %>%
mutate(d2= ifelse(D2< quantile(D2, 0.25), 0, ifelse(D2< quantile(D2, 0.75), (D2-quantile(D2, 0.25))/IQR(D2), 1))) %>%
mutate(d3= ifelse(D3< quantile(D3, 0.25), 0, ifelse(D3< quantile(D3, 0.75), (D3-quantile(D3, 0.25))/IQR(D3), 1))) %>%
mutate(b1= ifelse(B1< quantile(B1, 0.25), 0, ifelse(B1< quantile(B1, 0.75), (B1-quantile(B1, 0.25))/IQR(B1), 1))) %>%
mutate(b2= ifelse(B2< quantile(B2, 0.25), 0, ifelse(B2< quantile(B2, 0.75), (B2-quantile(B2, 0.25))/IQR(B2), 1))) %>%
mutate(b3= ifelse(B3< quantile(B3, 0.25), 0, ifelse(B3< quantile(B3, 0.75), (B3-quantile(B3, 0.25))/IQR(B3), 1))) %>%
mutate(b4= ifelse(B4< quantile(B4, 0.25), 0, ifelse(B4< quantile(B4, 0.75), (B4-quantile(B4, 0.25))/IQR(B4), 1))) %>%
mutate(c1= ifelse(C1< quantile(C1, 0.25), 0, ifelse(C1< quantile(C1, 0.75), (C1-quantile(C1, 0.25))/IQR(C1), 1))) %>%
mutate(c2= ifelse(C2< quantile(C2, 0.25), 0, ifelse(C2< quantile(C2, 0.75), (C2-quantile(C2, 0.25))/IQR(C2), 1))) %>%
mutate(c3= ifelse(C3< quantile(C3, 0.25), 0, ifelse(C3< quantile(C3, 0.75), (C3-quantile(C3, 0.25))/IQR(C3), 1))) %>%
mutate(c4= ifelse(C4< quantile(C4, 0.25), 0, ifelse(C4< quantile(C4, 0.75), (C4-quantile(C4, 0.25))/IQR(C4), 1))) %>%
mutate(s1= ifelse(S1< quantile(S1, 0.25), 0, ifelse(S1< quantile(S1, 0.75), (S1-quantile(S1, 0.25))/IQR(S1), 1))) %>%
mutate(s2= ifelse(S2< quantile(S2, 0.25), 0, ifelse(S2< quantile(S2, 0.75), (S2-quantile(S2, 0.25))/IQR(S2), 1))) %>%
ungroup()
str(data_norm)
# 정규화(?) 한 데이터를 저장
save(data_norm, file="data_norm.RData")
write.csv(data_norm, file="data_norm.csv")
##################################################################################################
#
##################################################################################################
# inner fence 보다 작으면 0, 크면 1, 사이는 정규화
# 즉, 하한은 Q1 - (1.5 * IQR), 상한은 Q3 + (1.5 * IQR)
# D1은 IQR이 0이어서 계산중에 분모가 0, d1는 사용할 수 없음.
data_norm_inner <- data %>% group_by(YEAR, T_ID) %>%
mutate(p1= ifelse(P1< quantile(P1, 0.25)-1.5*IQR(P1), 0, ifelse(P1< quantile(P1, 0.75)+1.5*IQR(P1), (P1-quantile(P1, 0.25)+1.5*IQR(P1))/(IQR(P1)*4), 1))) %>%
mutate(p2= ifelse(P2< quantile(P2, 0.25)-1.5*IQR(P2), 0, ifelse(P2< quantile(P2, 0.75)+1.5*IQR(P2), (P2-quantile(P2, 0.25)+1.5*IQR(P2))/(IQR(P2)*4), 1))) %>%
mutate(p3= ifelse(P3< quantile(P3, 0.25)-1.5*IQR(P3), 0, ifelse(P3< quantile(P3, 0.75)+1.5*IQR(P3), (P3-quantile(P3, 0.25)+1.5*IQR(P3))/(IQR(P3)*4), 1))) %>%
mutate(p4= ifelse(P4< quantile(P4, 0.25)-1.5*IQR(P4), 0, ifelse(P4< quantile(P4, 0.75)+1.5*IQR(P4), (P4-quantile(P4, 0.25)+1.5*IQR(P4))/(IQR(P4)*4), 1))) %>%
mutate(d1= ifelse(D1< quantile(D1, 0.25)-1.5*IQR(D1), 0, ifelse(D1< quantile(D1, 0.75)+1.5*IQR(D1), (D1-quantile(D1, 0.25)+1.5*IQR(D1))/(IQR(D1)*4), 1))) %>%
mutate(d2= ifelse(D2< quantile(D2, 0.25)-1.5*IQR(D2), 0, ifelse(D2< quantile(D2, 0.75)+1.5*IQR(D2), (D2-quantile(D2, 0.25)+1.5*IQR(D2))/(IQR(D2)*4), 1))) %>%
mutate(d3= ifelse(D3< quantile(D3, 0.25)-1.5*IQR(D3), 0, ifelse(D3< quantile(D3, 0.75)+1.5*IQR(D3), (D3-quantile(D3, 0.25)+1.5*IQR(D3))/(IQR(D3)*4), 1))) %>%
mutate(b1= ifelse(B1< quantile(B1, 0.25)-1.5*IQR(B1), 0, ifelse(B1< quantile(B1, 0.75)+1.5*IQR(B1), (B1-quantile(B1, 0.25)+1.5*IQR(B1))/(IQR(B1)*4), 1))) %>%
mutate(b2= ifelse(B2< quantile(B2, 0.25)-1.5*IQR(B2), 0, ifelse(B2< quantile(B2, 0.75)+1.5*IQR(B2), (B2-quantile(B2, 0.25)+1.5*IQR(B2))/(IQR(B2)*4), 1))) %>%
mutate(b3= ifelse(B3< quantile(B3, 0.25)-1.5*IQR(B3), 0, ifelse(B3< quantile(B3, 0.75)+1.5*IQR(B3), (B3-quantile(B3, 0.25)+1.5*IQR(B3))/(IQR(B3)*4), 1))) %>%
mutate(b4= ifelse(B4< quantile(B4, 0.25)-1.5*IQR(B4), 0, ifelse(B4< quantile(B4, 0.75)+1.5*IQR(B4), (B4-quantile(B4, 0.25)+1.5*IQR(B4))/(IQR(B4)*4), 1))) %>%
mutate(c1= ifelse(C1< quantile(C1, 0.25)-1.5*IQR(C1), 0, ifelse(C1< quantile(C1, 0.75)+1.5*IQR(C1), (C1-quantile(C1, 0.25)+1.5*IQR(C1))/(IQR(C1)*4), 1))) %>%
mutate(c2= ifelse(C2< quantile(C2, 0.25)-1.5*IQR(C2), 0, ifelse(C2< quantile(C2, 0.75)+1.5*IQR(C2), (C2-quantile(C2, 0.25)+1.5*IQR(C2))/(IQR(C2)*4), 1))) %>%
mutate(c3= ifelse(C3< quantile(C3, 0.25)-1.5*IQR(C3), 0, ifelse(C3< quantile(C3, 0.75)+1.5*IQR(C3), (C3-quantile(C3, 0.25)+1.5*IQR(C3))/(IQR(C3)*4), 1))) %>%
mutate(c4= ifelse(C4< quantile(C4, 0.25)-1.5*IQR(C4), 0, ifelse(C4< quantile(C4, 0.75)+1.5*IQR(C4), (C4-quantile(C4, 0.25)+1.5*IQR(C4))/(IQR(C4)*4), 1))) %>%
mutate(s1= ifelse(S1< quantile(S1, 0.25)-1.5*IQR(S1), 0, ifelse(S1< quantile(S1, 0.75)+1.5*IQR(S1), (S1-quantile(S1, 0.25)+1.5*IQR(S1))/(IQR(S1)*4), 1))) %>%
mutate(s2= ifelse(S2< quantile(S2, 0.25)-1.5*IQR(S2), 0, ifelse(S2< quantile(S2, 0.75)+1.5*IQR(S2), (S2-quantile(S2, 0.25)+1.5*IQR(S2))/(IQR(S2)*4), 1))) %>%
ungroup()
str(data_norm_inner)
save(data_norm_inner, file="data_norm.RData")
write.csv(data_norm_inner, file="data_norm.csv")
data %>% transmute(GDAY_DS=as.Date(as.character(data$GDAY_DS), "%Y%m%d"))
data %>% mutate(GDAY_DS=as.Date(as.character(data$GDAY_DS), "%Y%m%d"))
data %>% mutate(as.Date(as.character(data$GDAY_DS), "%Y%m%d"))
data_graph <- data %>% mutate(as.character(data$GDAY_DS))
data
data %>% mutate(as.character(GDAY_DS))
data %>% mutate(GDAY_DS=as.Date(as.character(GDAY_DS), "%Y%m%d"))
data_g <- data %>% mutate(GDAY_DS=as.Date(as.character(GDAY_DS), "%Y%m%d"))
g <- ggplot(data=data_g, mapping = aes(x=GDAY_DS, y=WC, group=T_ID))+geom_point()
ggplotly(g)
g <- ggplot(data=data_g, mapping = aes(x=GDAY_DS, y=WC, group=T_ID))+geom_point(aes(color=T_ID))
ggplotly(g)
g <- ggplot(data=data_g, mapping = aes(x=GDAY_DS, y=WC, group=T_ID))+geom_line(aes(color=T_ID))
ggplotly(g)
g <- ggplot(data=data_g, mapping = aes(x=GDAY_DS, y=WC, group=T_ID, color=T_ID))+geom_line()
ggplotly(g)
g <- ggplot(data=data_g, mapping = aes(x=GDAY_DS, y=WC, group=T_ID, color=T_ID))+geom_line()+geom_point()
ggplotly(g)
g <- ggplot(data=data_g, mapping = aes(x=GDAY_DS, y=WC, group=c(YEAR, T_ID), color=T_ID))+geom_line()+geom_point()
ggplotly(g)
g <- ggplot(data=data_g, mapping = aes(x=GDAY_DS, y=WC, group= T_ID, color=T_ID))+geom_point()
ggplotly(g)
g <- c()
for (year in 2016:2020) {
data_g_year <- data_g %>% filter(YEAR==year)
g[year-2015] <- ggplot(data=data_g, mapping = aes(x=GDAY_DS, y=WC, group= T_ID, color=T_ID))+geom_line()+geom_point()
}
year
g
ggplotly(g)
ggplotly(g[1])
ggplotly(g[[1]])
rm(g)
g <- list()
for (year in 2016:2020) {
data_g_year <- data_g %>% filter(YEAR==year)
g[year] <- ggplot(data=data_g, mapping = aes(x=GDAY_DS, y=WC, group= T_ID, color=T_ID))+geom_line()+geom_point()
}
str(g)
rm(g)
g <- list()
str(g)
g$1
for (year in 2016:2020) {
data_g_year <- data_g %>% filter(YEAR==year)
ggplot(data=data_g, mapping = aes(x=GDAY_DS, y=WC, group= T_ID, color=T_ID))+geom_line()+geom_point()
}
year
ggplot(data=data_g, mapping = aes(x=GDAY_DS, y=WC, group= T_ID, color=T_ID))+geom_line()+geom_point()
data_g_year <- data_g %>% filter(YEAR==year)
ggplot(data=data_g_year, mapping = aes(x=GDAY_DS, y=WC, group= T_ID, color=T_ID))+geom_line()+geom_point()
for (year in 2016:2020) {
data_g_year <- data_g %>% filter(YEAR==year)
g <- ggplot(data=data_g_year, mapping = aes(x=GDAY_DS, y=WC, group= T_ID, color=T_ID))+geom_line()+geom_point()
ggplotly(g)
}
ggplotly(g)
year = 2016
{
data_g_year <- data_g %>% filter(YEAR==year)
g <- ggplot(data=data_g_year, mapping = aes(x=GDAY_DS, y=WC, group= T_ID, color=T_ID))+geom_line()+geom_point()
ggplotly(g)
}
year = 2017
{
data_g_year <- data_g %>% filter(YEAR==year)
g <- ggplot(data=data_g_year, mapping = aes(x=GDAY_DS, y=WC, group= T_ID, color=T_ID))+geom_line()+geom_point()
ggplotly(g)
}
year = 2018
{
data_g_year <- data_g %>% filter(YEAR==year)
g <- ggplot(data=data_g_year, mapping = aes(x=GDAY_DS, y=WC, group= T_ID, color=T_ID))+geom_line()+geom_point()
ggplotly(g)
}
year = 2019
{
data_g_year <- data_g %>% filter(YEAR==year)
g <- ggplot(data=data_g_year, mapping = aes(x=GDAY_DS, y=WC, group= T_ID, color=T_ID))+geom_line()+geom_point()
ggplotly(g)
}
