op <- par(no.readonly = TRUE)
par(mfrow=c(5,2))
for(T_ID in team_list$T_ID){
team_spider(T_ID)
box(which = "outer", lty = 1, col="red")
box(which = "inner", lty = 1, col="blue")
box(which = "figure", lty = 1, col="pink")
box(which = "plot", lty = 1, col="black")
}
op <- par(no.readonly = TRUE)
par(mfrow=c(2,5), mar=c(4,4,4,4))
for(T_ID in team_list$T_ID){
team_spider(T_ID)
box(which = "outer", lty = 1, col="red")
box(which = "inner", lty = 1, col="blue")
box(which = "figure", lty = 1, col="pink")
box(which = "plot", lty = 1, col="black")
}
op <- par(no.readonly = TRUE)
par(mfrow=c(2,5), mar=c(4,4,4,4), oma=c(4,0,0,0))
for(T_ID in team_list$T_ID){
team_spider(T_ID)
box(which = "outer", lty = 1, col="red")
box(which = "inner", lty = 1, col="blue")
box(which = "figure", lty = 1, col="pink")
box(which = "plot", lty = 1, col="black")
}
par(no.readonly = TRUE)
op <- par(no.readonly = TRUE)
par(mfrow=c(2,5))
for(T_ID in team_list$T_ID){
team_spider(T_ID)
box(which = "outer", lty = 1, col="red")
box(which = "inner", lty = 1, col="blue")
box(which = "figure", lty = 1, col="pink")
box(which = "plot", lty = 1, col="black")
}
par(mfrow=c(2,5), oma=c(4, 1, 1, 1))
for(T_ID in team_list$T_ID){
team_spider(T_ID)
box(which = "outer", lty = 1, col="red")
box(which = "inner", lty = 1, col="blue")
box(which = "figure", lty = 1, col="pink")
box(which = "plot", lty = 1, col="black")
}
1 == 1.0
as.integer(1) == 1.0
as.logical(0)
as.logical(-1)
!as.logical(0)
!0
!-1
!1
!"FALSE"
as.logical("FALSE")
as.logical("a")
as.logical("F")
as.logical("False")
as.logical("false")
as.logical("f")
as.logical("True")
TREU | "python"
TRUE | FALSE
TRUE & TRUE
TRUE & "python"
person <- c("james", 1, 1.1, TRUE)
person
person <- c(1, 1.1, TRUE)
person
c(1, TRUE)
c("1", TRUE)
c(1.1, TRUE)
list()
vector(mode="integer", length=10)
factor(x=character(5), levels=LETTERS[1:5])
character(5)
seq(10)
seq(5:10)
5:10
seq(5, 10)
seq(2:4)
seq(c(2,3,4))
seq(c("a", "b", "c"))
range(c(1, 2, 4, 7))
seq(2, 10, by=2)
seq(2, 9, by =2)
seq(2, 10, by = 2, each = 2)
seq(2, 10, by = 2, times = 2)
seq(2, 10, by = 2, time = 2)
seq(2, 10, each = 2)
seq(2, 10, time = 2)
seq(2, 10, times = 2)
?seq
seq(2, 10, length.out = 15)
print("a", "b", "c")
print(paste("a", "b", "c"))
}
print(paste("a", "b", "c"))
print(c("a", "c", "b"))
0 %in% q
5 %in% q
2 == q
2-q
5 !%in% q
!any(5 == q)
length(q)
## 데이터 정리 ..... P1, P2, .... S2를 정규화 없이
stat_general_by_T_Y <-  data %>% group_by(T_ID, YEAR) %>%
summarise(P1=mean(P1), P2=mean(P2), P3=mean(P3), P4=mean(P4),
D1=mean(D1), D2=mean(D2), D3=mean(D3),
B1=mean(B1), B2=mean(B2), B3=mean(B3), B4=mean(B4),
C1=mean(C1), C2=mean(C2), C3=mean(C3), C4=mean(C4),
S1=mean(S1), S2=mean(S2))
library(dplyr)
## 데이터 정리 ..... P1, P2, .... S2를 정규화 없이
stat_general_by_T_Y <-  data %>% group_by(T_ID, YEAR) %>%
summarise(P1=mean(P1), P2=mean(P2), P3=mean(P3), P4=mean(P4),
D1=mean(D1), D2=mean(D2), D3=mean(D3),
B1=mean(B1), B2=mean(B2), B3=mean(B3), B4=mean(B4),
C1=mean(C1), C2=mean(C2), C3=mean(C3), C4=mean(C4),
S1=mean(S1), S2=mean(S2))
stat_general_by_T_Y <- as.data.frame(stat_general_by_T_Y)
rownames(stat_general_by_T_Y) <- paste(stat_general_by_T_Y$T_ID, stat_general_by_T_Y$YEAR, sep="_")
head(stat_general_by_T_Y)
colnames(stat_general_by_T_Y)
colnames(stat_general_by_T_Y)[c(-1, -2)]
#### 기초 스탯에 대한 10개 구단의 시즌별 변동 챠트
## 챠트 함수를 정의
team_spider_general <- function(T_ID){
stars(stat_general_by_T_Y[stat_general_by_T_Y$T_ID==T_ID, colnames(stat_general_by_T_Y)[c(-1, -2)]],
location = c(0,0), key.loc = c(0,0), scale = FALSE,
col.lines = c(1:length(2016:2020)))
title(main = paste("General Spider Plot,", T_ID, "팀 각 시즌"))
}
op <- par(no.readonly = TRUE)
par(mfrow=c(2,5), oma=c(4, 1, 1, 1))
for(T_ID in team_list$T_ID){
team_spider_general(T_ID)
}
par(op)
#### 기초 스탯에 대한 10개 구단의 시즌별 변동 챠트
## 챠트 함수를 정의
team_spider_general <- function(T_ID){
stars(stat_general_by_T_Y[stat_general_by_T_Y$T_ID==T_ID, colnames(stat_general_by_T_Y)[c(-1, -2)]],
location = c(0,0), key.loc = c(0,0), scale = TRUE,
col.lines = c(1:length(2016:2020)))
title(main = paste("General Spider Plot,", T_ID, "팀 각 시즌"))
}
## 챠트 그리기
op <- par(no.readonly = TRUE)
par(mfrow=c(2,5), oma=c(4, 1, 1, 1))
for(T_ID in team_list$T_ID){
team_spider_general(T_ID)
}
par(op)
legend(1,1)
op <- par(no.readonly = TRUE)
par(mfrow=c(2,5), oma=c(4, 1, 1, 1))
for(T_ID in team_list$T_ID){
team_spider_general(T_ID)
}
legend(x=5, y=5, legend = rownames(stat_general_by_T_Y), lty = 2, col=c(1:10), lwd = 2)
col(1)
plot(1:10, col=c(1:10))
par(op)
par(mfraw=c(1,1))
par(mfrow=c(1,1))
plot(1:10, col=c(1:10))
plot(1:10, col=c(1:10), pch=19)
plot(1:10, col=c(1:5), pch=16)
plot(1:5, col=c(1:5), pch=16)
op <- par(no.readonly = TRUE)
par(mfrow=c(2,5), oma=c(4, 1, 1, 1))
for(T_ID in team_list$T_ID){
team_spider(T_ID)
# box(which = "outer", lty = 1, col="red")
# box(which = "inner", lty = 1, col="blue")
# box(which = "figure", lty = 1, col="pink")
# box(which = "plot", lty = 1, col="black")
}
par(op)
#######################
# 연도별
# stars 챠트
stars(stat_by_YEAR, key.loc = c(7,2), scale = FALSE)
title(main = "Star Plot, 시즌별 전체팀")
# spider 챠트
stars(stat_by_YEAR, location = c(0,0), key.loc = c(0,0), scale = FALSE, col.lines = c(1:5))
title(main = "Spider Plot, 시즌별 전체팀")
legend(x=1, y=1, legend = rownames(stat_by_YEAR), lty = 2, col = c(1:5), lwd = 2)
data_norm_2 <- read.csv("data_norm_2.csv")
# spider 챠트 함수를 정의함
team_spider <- function(T_ID){
stars(stat_by_T_Y[stat_by_T_Y$T_ID==T_ID, c("P", "D", "B", "C", "S")],
location = c(0,0), key.loc = c(0,0), scale = TRUE,
col.lines = c(1:length(2016:2020)))
title(main = paste("Spider Plot,", T_ID, "팀 각 시즌"))
}
op <- par(no.readonly = TRUE)
par(mfrow=c(2,5), oma=c(4, 1, 1, 1))
for(T_ID in team_list$T_ID){
team_spider(T_ID)
# box(which = "outer", lty = 1, col="red")
# box(which = "inner", lty = 1, col="blue")
# box(which = "figure", lty = 1, col="pink")
# box(which = "plot", lty = 1, col="black")
}
par(op)
plot(1:5, col=c(1:5))
plot(1:5, col=c(1:5), pch=16, cex=4)
plot(1:5, col=c(1:5), pch=16, cex=10)
rownames(installed.packages())
required_pkg %in% installed_pkg
### 환경설정
required_pkg <- c("ipred", "gbm", "randomForest", "readxl")
required_pkg %in% installed_pkg
installed_pkg <- rownames(installed.packages())
required_pkg %in% installed_pkg
required_pkg <- c("ipred", "gbm", "randomForest", "readxl")
installed_pkg <- rownames(installed.packages())
pkg_to_install <- required_pkg[!(required_pkg %in% installed_pkg)]
if (length(pkg_to_install) > 0) install.packages(pkg_to_install)
library(c(ipred, gbm, randomForest, readxl))
library(ipred)
library(gbm)
library(randomForest)
library(readxl)
### 함수 정의 : Boosting 횟수 M 정하기
find_M <- function(m){
fit.boost         <- gbm(as.factor(SGG)~.,data=train,distribution="multinomial",n.trees=m)
pred.prob         <- predict(fit.boost,x_test,type="response",n.trees=m)  #확률로 나옴
pred.prob         <- matrix(pred.prob, ncol = length(fit.boost$classes))
pred              <- fit.boost$classes[apply(pred.prob,1,which.max)]
err_rate          <- mean(pred!=y_test)
return(err_rate)
}
find_M(3)
unique(data$T_ID)
library(dplyr)
data %>% select(G_ID:T_ID)
data %>% select(G_ID:T_ID, W, YEAR, P:S)
data %>% select(T_ID, W, YEAR, P:S)
team_list
str(team_list)
team_list[1]
team
team <- unique(data$T_ID)
data %>% select(T_ID, W, YEAR, P:S) %>% filter(YEAR %in% 2016:2018) %>% filter(T_ID==team[i]) %>% str()
i <- 1
data %>% select(T_ID, W, YEAR, P:S) %>% filter(YEAR %in% 2016:2018) %>% filter(T_ID==team[i]) %>% str()
train[[i]] <- data %>% select(T_ID, W, YEAR, P:S) %>% filter(YEAR %in% 2016:2018) %>% filter(T_ID==team[i])
train[[i]]
train
str(train)
rm(train)
list()
train <- list()
train[[i]]
train[[1]]
train <- list(team[1]=data.frame(), team[2]=data.frame())
train
team[1]
?list
temp <- data %>% select(T_ID, W, YEAR, P:S) %>% filter(YEAR %in% 2016:2018) %>% filter(T_ID==team[i])
train <- list(train, temp)
train
train <- list()
train <- list(train, temp)
str(train)
train <- list(HH=data.frame(), HT=data.frame())
str(train)
train[[i]] <- temp
str(train)
train   <- list(HH=data.frame(), HT=data.frame(), KT=data.frame(), LG=data.frame(), LT=data.frame(), NC=data.frame(), OB=data.frame(), SK=data.frame(), SS=data.frame(), WO=data.frame())
val     <- list(HH=data.frame(), HT=data.frame(), KT=data.frame(), LG=data.frame(), LT=data.frame(), NC=data.frame(), OB=data.frame(), SK=data.frame(), SS=data.frame(), WO=data.frame())
test    <- list(HH=data.frame(), HT=data.frame(), KT=data.frame(), LG=data.frame(), LT=data.frame(), NC=data.frame(), OB=data.frame(), SK=data.frame(), SS=data.frame(), WO=data.frame())
for (i in 1:10){
train[[i]]  <- data %>% select(T_ID, W, YEAR, P:S) %>% filter(YEAR %in% 2016:2018) %>% filter(T_ID==team[i])
val[[i]]    <- data %>% select(T_ID, W, YEAR, P:S) %>% filter(YEAR == 2019) %>% filter(T_ID==team[i])
test[[i]]   <- data %>% select(T_ID, W, YEAR, P:S) %>% filter(YEAR == 2020) %>% filter(T_ID==team[i])
}
str(train); str(val); str(test)
str(test)
str(test)
train[[i]][4:8]
print(team[i])
fit.bagg <- ipredbagg(y=train[[i]][2], X=train[[i]][4:8], nbagg=1000)
library(ipred)
library(gbm)
library(randomForest)
library(readxl)
library(dplyr)
fit.bagg <- ipredbagg(y=train[[i]][2], X=train[[i]][4:8], nbagg=1000)
train[[i]][2]
str(train[[i]][2])
fit.bagg <- ipredbagg(y=train[[i]][2], X=train[[i]][4:8], nbagg=1000)
fit.bagg <- ipredbagg(y=as.factor(train[[i]][2]), X=train[[i]][4:8], nbagg=1000)
str(train[[i]][2])
fit.bagg <- ipredbagg(y=train[[i]][2], X=train[[i]][4:8], data=train[[i]], nbagg=1000)
fit.bagg <- ipredbagg(y=train[[i]][2], train[[i]][4:8], nbagg=1000)
as.factor(train[[i]][2])
train[[i]][2]
as.vector(train[[i]][2])
as.factor(train[[i]][2])
as.factor(as.vector(train[[i]][2]))
fit.bagg <- ipredbagg(y=train[[i]][2], X=train[[i]][4:8], nbagg=1000)
fit.bagg <- ipredbagg(y=train[[i]][,2], X=train[[i]][4:8], nbagg=1000)
fit.bagg
fit.bagg <- ipredbagg(y=train[[i]][,2], X=train[[i]][,4:8], nbagg=1000)
fit.bagg
fit.bagg <- list(HH=data.frame(), HT=data.frame(), KT=data.frame(), LG=data.frame(), LT=data.frame(), NC=data.frame(), OB=data.frame(), SK=data.frame(), SS=data.frame(), WO=data.frame())
fit.bagg[[i]] <- ipredbagg(y=train[[i]][,2], X=train[[i]][,4:8], nbagg=1000)
fit.bagg
fit.bagg <- list(HH=NULL, HT=NULL, KT=NULL, LG=NULL, LT=NULL, NC=NULL, OB=NULL, SK=NULL, SS=NULL, WO=NULL)
fit.bagg[[i]] <- ipredbagg(y=train[[i]][,2], X=train[[i]][,4:8], nbagg=1000)
[[i]] <- ipredbagg(y=train[[i]][,2], X=train[[i]][,4:8], nbagg=1000)
fit.bagg
fit.bagg <- list(HH=NULL, HT=NULL, KT=NULL, LG=NULL, LT=NULL, NC=NULL, OB=NULL, SK=NULL, SS=NULL, WO=NULL)
pred     <- list(HH=NULL, HT=NULL, KT=NULL, LG=NULL, LT=NULL, NC=NULL, OB=NULL, SK=NULL, SS=NULL, WO=NULL)
for (i in 1:10){
print(team[i])
# 모형적합 -----------
fit.bagg[[i]] <- ipredbagg(y=train[[i]][,2], X=train[[i]][,4:8], nbagg=1000)
fit.bagg[[i]]
# 예측 ---------------
pred[[i]] <- predict(fit.bagg[[i]], newdata = val[[i]][,4:8])
table(pred[[i]], val[[i]][,2])
# 결과 ---------------
cat("오분류율 = ", mean(pred!=val[[i]][,2])*100, "%")
}
pred[[i]]
table(pred[[i]], val[[i]][,2])
pred!=val[[i]][,2]
fit.bagg <- list(HH=NULL, HT=NULL, KT=NULL, LG=NULL, LT=NULL, NC=NULL, OB=NULL, SK=NULL, SS=NULL, WO=NULL)
pred     <- list(HH=NULL, HT=NULL, KT=NULL, LG=NULL, LT=NULL, NC=NULL, OB=NULL, SK=NULL, SS=NULL, WO=NULL)
for (i in 1:10){
print(as.character(team[i]))
# 모형적합 -----------
fit.bagg[[i]] <- ipredbagg(y=train[[i]][,2], X=train[[i]][,4:8], nbagg=1000)
fit.bagg[[i]]
# 예측 ---------------
pred[[i]] <- predict(fit.bagg[[i]], newdata = val[[i]][,4:8])
table(pred[[i]], val[[i]][,2])
# 결과 ---------------
print(paste("오분류율 = ", mean(pred[[i]]!=val[[i]][,2])*100, "%"))
}
for (i in 1:10){
# 모형적합 -----------
fit.bagg[[i]] <- ipredbagg(y=train[[i]][,2], X=train[[i]][,4:8], nbagg=1000)
fit.bagg[[i]]
# 예측 ---------------
pred[[i]] <- predict(fit.bagg[[i]], newdata = val[[i]][,4:8])
table(pred[[i]], val[[i]][,2])
# 결과 ---------------
print(paste(team[[i]], ":: 오분류율 = ", mean(pred[[i]]!=val[[i]][,2])*100, "%"))
}
# 확률예측 ---------------
pred_p[[i]] <- predict(fit.bagg[[i]], val[[i]][,4:8], type="prob")
pred_p   <- list(HH=NULL, HT=NULL, KT=NULL, LG=NULL, LT=NULL, NC=NULL, OB=NULL, SK=NULL, SS=NULL, WO=NULL)
# 확률예측 ---------------
pred_p[[i]] <- predict(fit.bagg[[i]], val[[i]][,4:8], type="prob")
head(pred_p)
i
fit.bagg[[i]]
val[[i]][,4:8]
val[[i]]
# 확률예측 ---------------
pred_p[[i]] <- predict(fit.bagg[[i]], val[[i]][,4:8], type="prob")
head(pred_p)
pred_p
head(pred_p[[i]])
# 모형적합 -------
fit.boosting[[i]] <- gbm(W ~ P+D+B+C+S  , data = train[[i]])
# 모형적합 -------
fit.boosting[[i]] <- gbm(W ~ P+D+B+C+S  , data = train[[i]], distribution = "multinomial", n.trees=500)
# 모형적합 -------
fit.boosting[[i]] <- gbm(W ~ P+D+B+C+S  , data = train[[i]], distribution = "binomial", n.trees=500)
# 모형적합 -------
fit.boosting[[i]] <- gbm(W ~ P+D+B+C+S  , data = train[[i]], distribution = "multinomial", n.trees=500)
fit.boosting      <- list(HH=NULL, HT=NULL, KT=NULL, LG=NULL, LT=NULL, NC=NULL, OB=NULL, SK=NULL, SS=NULL, WO=NULL)
pred.boosting     <- list(HH=NULL, HT=NULL, KT=NULL, LG=NULL, LT=NULL, NC=NULL, OB=NULL, SK=NULL, SS=NULL, WO=NULL)
pred_p.boosting   <- list(HH=NULL, HT=NULL, KT=NULL, LG=NULL, LT=NULL, NC=NULL, OB=NULL, SK=NULL, SS=NULL, WO=NULL)
# 모형적합 -------
fit.boosting[[i]] <- gbm(W ~ P+D+B+C+S  , data = train[[i]], distribution = "multinomial", n.trees=500)
summary(fit.boosting[[i]])
str(train[[i]])
# 모형적합 -------
fit.boosting[[i]] <- gbm(W ~ ., data = train[[i]][, c(2, 4:8)], distribution = "multinomial", n.trees=500)
summary(fit.boosting[[i]])
# 모형적합 -------
fit.boosting[[i]] <- gbm(W ~ P+D+B+C+S  , data = train[[i]], distribution = "binomial", n.trees=500)
# summary(fit.boosting[[i]])
# 확률예측 -------
pred_p.boosting[[i]] <- predict(fit.boosting, val[[i]][,4:8], type="response", n.trees=500)
# summary(fit.boosting[[i]])
# 확률예측 -------
pred_p.boosting[[i]] <- predict(fit.boosting[[i]], val[[i]][,4:8], type="response", n.trees=500)
head(pred_p.boosting[[i]])
length(pred_p.boosting[[i]])
pred_p.boosting[[i]] <- matrix(pred_p.boosting, ncol=2)
head(pred_p.boosting[[i]])
pred_p.boosting[[i]]
# summary(fit.boosting[[i]])
# 확률예측 -------
pred_p.boosting[[i]] <- predict(fit.boosting[[i]], val[[i]][,4:8], type="response", n.trees=500)
pred_p.boosting[[i]] <- matrix(pred_p.boosting[[i]], ncol=2)
head(pred_p.boosting[[i]])
levels(val[[i]][,2])
colnames(pred.prob[[i]]) <- levels(val[[i]][,2])
colnames(pred_p.boosting[[i]]) <- levels(val[[i]][,2])
head(pred_p.boosting[[i]])
# 분류 -----------
pred.boosting[[i]] <- (pred_p.boosting, 1, which.max)
# 분류 -----------
pred.boosting[[i]] <- apply(pred_p.boosting, 1, which.max)
# 분류 -----------
pred.boosting[[i]] <- apply(pred_p.boosting[[i]], 1, which.max)
head(pred.boosting[[i]])
pred.boosting[[i]] <- ifelse(pred.boosting[[i]]==1, "LOSE", "WIN")
head(pred.boosting[[i]])
table(pred.boosting[[i]], val[[i]][,2])
fit.boosting      <- list(HH=NULL, HT=NULL, KT=NULL, LG=NULL, LT=NULL, NC=NULL, OB=NULL, SK=NULL, SS=NULL, WO=NULL)
pred_p.boosting   <- list(HH=NULL, HT=NULL, KT=NULL, LG=NULL, LT=NULL, NC=NULL, OB=NULL, SK=NULL, SS=NULL, WO=NULL)
pred.boosting     <- list(HH=NULL, HT=NULL, KT=NULL, LG=NULL, LT=NULL, NC=NULL, OB=NULL, SK=NULL, SS=NULL, WO=NULL)
for (i in 1:10){
# 모형적합 -------
fit.boosting[[i]] <- gbm(W ~ P+D+B+C+S  , data = train[[i]], distribution = "multinomial", n.trees=500)
# summary(fit.boosting[[i]])
# 확률예측 -------
pred_p.boosting[[i]] <- predict(fit.boosting[[i]], val[[i]][,4:8], type="response", n.trees=500)
pred_p.boosting[[i]] <- matrix(pred_p.boosting[[i]], ncol=2)
colnames(pred_p.boosting[[i]]) <- levels(val[[i]][,2])
head(pred_p.boosting[[i]])
# 분류 -----------
pred.boosting[[i]] <- apply(pred_p.boosting[[i]], 1, which.max)
pred.boosting[[i]] <- ifelse(pred.boosting[[i]]==1, "LOSE", "WIN")
table(pred.boosting[[i]], val[[i]][,2])
# 오분류율 -------
print(paste(team[i], ":: 오분류율 = ", mean(pred.boosting[[i]]!=val[[i]][,2])*100, "%"))
}
print(table(pred.boosting[[i]], val[[i]][,2]))
for (i in 1:10){
# 모형적합 -------
fit.boosting[[i]] <- gbm(W ~ P+D+B+C+S  , data = train[[i]], distribution = "multinomial", n.trees=500)
# summary(fit.boosting[[i]])
# 확률예측 -------
pred_p.boosting[[i]] <- predict(fit.boosting[[i]], val[[i]][,4:8], type="response", n.trees=500)
pred_p.boosting[[i]] <- matrix(pred_p.boosting[[i]], ncol=2)
colnames(pred_p.boosting[[i]]) <- levels(val[[i]][,2])
head(pred_p.boosting[[i]])
# 분류 -----------
pred.boosting[[i]] <- apply(pred_p.boosting[[i]], 1, which.max)
pred.boosting[[i]] <- ifelse(pred.boosting[[i]]==1, "LOSE", "WIN")
print(table(pred.boosting[[i]], val[[i]][,2]))
# 오분류율 -------
print(paste(team[i], ":: 오분류율 = ", mean(pred.boosting[[i]]!=val[[i]][,2])*100, "%"))
}
team=="WO"
which(team=="WO")
find_M <- function(m, t_id){
i <- which(team==t_id)
fit <- gbm(W~P+D+B+C+S, data = train[[i]], distribution = "multinomial", n.trees = m)
pred.prob <- predict(fit, train[[i]][,4:8],type="response", n.trees=m)
pred.prob <- matrix(pred.prob, ncol=length(fit$classes))
pred <- fit$classes[apply(pred.prob, 1, which.max)]
err_rate <- mean(pred!=val[[i]][,2])
return(err_rate)
}
find_M(100, "HH")
find_M(1000, "HH")
find_M(10000, "HH")
find_M(10, "HH")
find_M(1, "HH")
find_M(20, "HH")
find_M(500, "HH")
find_M(500, "WO")
pred!=val[[i]][,2]
pred
pred.prob
predict(fit, train[[i]][,4:8],type="response", n.trees=m)
i
m=500
fit <- gbm(W~P+D+B+C+S, data = train[[i]], distribution = "multinomial", n.trees = m)
pred.prob <- predict(fit, train[[i]][,4:8],type="response", n.trees=m)
pred.prob <- matrix(pred.prob, ncol=length(fit$classes))
pred <- fit$classes[apply(pred.prob, 1, which.max)]
err_rate <- mean(pred!=val[[i]][,2])
err_rate
fit <- gbm(W~P+D+B+C+S, data = train[[i]], distribution = "multinomial", n.trees = m)
pred.prob <- predict(fit, val[[i]][,4:8],type="response", n.trees=m)
pred.prob <- matrix(pred.prob, ncol=length(fit$classes))
pred <- fit$classes[apply(pred.prob, 1, which.max)]
err_rate <- mean(pred!=val[[i]][,2])
err_rate
for (i in seq(500, 10000, length.out = 100)){}
t_id <- "WO"
for (m in seq(500, 10000, length.out = 100)){
print(paste(t_id, m, find_M(m, t_id)))
}
find_M <- function(m, t_id){
i <- which(team==t_id)
fit <- gbm(W~P+D+B+C+S, data = train[[i]], distribution = "multinomial", n.trees = m)
pred.prob <- predict(fit, val[[i]][,4:8],type="response", n.trees=m)
pred.prob <- matrix(pred.prob, ncol=length(fit$classes))
pred <- fit$classes[apply(pred.prob, 1, which.max)]
err_rate <- mean(pred!=val[[i]][,2])
return(err_rate)
}
t_id <- "WO"
for (m in seq(500, 10000, length.out = 100)){
print(paste(t_id, m, find_M(m, t_id)))
}
